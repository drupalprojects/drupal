<?php

/**
 * @file
 * Install, update and uninstall functions for the Comment module.
 */

/**
 * Implements HOOK_uninstall().
 */
function comment_uninstall() {
  // Remove the comment fields.
  $fields = entity_load_multiple_by_properties('field_config', array('type' => 'comment'));
  foreach ($fields as $field) {
    entity_invoke_bundle_hook('delete', 'comment', $field->entity_type . '__' . $field->name);
    $field->delete();
  }

  // Remove state setting.
  \Drupal::state()->delete('comment.node_comment_statistics_scale');
}

/**
 * Implements HOOK_install().
 */
function comment_install() {
  // By default, maintain entity statistics for comments.
  // @see \Drupal\comment\CommentStorage::updateEntityStatistics().
  \Drupal::state()->set('comment.maintain_entity_statistics', TRUE);
}

/**
 * Implements HOOK_schema().
 */
function comment_schema() {
  $schema['comment'] = array(
    'description' => 'Stores comments and associated data.',
    'fields' => array(
      'cid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique comment ID.',
      ),
      'uuid' => array(
        'description' => 'Unique Key: Universally unique identifier for this entity.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'pid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {comment}.cid to which this comment is a reply. If set to 0, this comment is not a reply to an existing comment.',
      ),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The entity_id of the entity to which this comment is a reply.',
      ),
      'entity_type' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => 'node',
        'length' => 255,
        'description' => 'The entity_type of the entity to which this comment is a reply.',
      ),
      'field_id' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => 'node.comment',
        'length' => 255,
        'description' => 'The field_id of the field that was used to add this comment.',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid who authored the comment. If set to 0, this comment was created by an anonymous user.',
      ),
      'subject' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The comment title.',
      ),
      'hostname' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "The author's host name.",
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the comment was created, as a Unix timestamp.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the comment was last edited, as a Unix timestamp.',
      ),
      'status' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'The published status of a comment. (0 = Not Published, 1 = Published)',
      ),
      'thread' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => "The alphadecimal representation of the comment's place in a thread, consisting of a base 36 string prefixed by an integer indicating its length.",
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => FALSE,
        'description' => "The comment author's name. Uses {users}.name if the user is logged in, otherwise uses the value typed into the comment form.",
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => "The comment author's e-mail address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",
      ),
      'homepage' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => "The comment author's home page address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",
      ),
      'langcode' => array(
        'description' => 'The {language}.langcode of this comment.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'comment_status_pid' => array('pid', 'status'),
      'comment_num_new' => array(
        'entity_id',
        array('entity_type', 32),
        array('field_id', 32),
        'status',
        'created',
        'cid',
        'thread',
      ),
      'comment_uid' => array('uid'),
      'comment_entity_langcode' => array(
        'entity_id',
        array('entity_type', 32),
        array('field_id', 32),
        'langcode',
      ),
      'comment_created' => array('created'),
    ),
    'primary key' => array('cid'),
    'unique keys' => array(
      'uuid' => array('uuid'),
    ),
    'foreign keys' => array(
      'comment_author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['comment_entity_statistics'] = array(
    'description' => 'Maintains statistics of entity and comments posts to show "new" and "updated" flags.',
    'fields' => array(
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The entity_id of the entity for which the statistics are compiled.',
      ),
      'entity_type' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => 'node',
        'length' => 255,
        'description' => 'The entity_type of the entity to which this comment is a reply.',
      ),
      'field_id' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => 'node__comment',
        'length' => 255,
        'description' => 'The field_id of the field that was used to add this comment.',
      ),
      'cid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {comment}.cid of the last comment.',
      ),
      'last_comment_timestamp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The Unix timestamp of the last comment that was posted within this node, from {comment}.changed.',
      ),
      'last_comment_name' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => FALSE,
        'description' => 'The name of the latest author to post a comment on this node, from {comment}.name.',
      ),
      'last_comment_uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The user ID of the latest author to post a comment on this node, from {comment}.uid.',
      ),
      'comment_count' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The total number of comments on this entity.',
      ),
    ),
    'primary key' => array('entity_id', array('entity_type', 32), array('field_id', 32)),
    'indexes' => array(
      'last_comment_timestamp' => array('last_comment_timestamp'),
      'comment_count' => array('comment_count'),
      'last_comment_uid' => array('last_comment_uid'),
    ),
    'foreign keys' => array(
      'last_comment_author' => array(
        'table' => 'users',
        'columns' => array(
          'last_comment_uid' => 'uid',
        ),
      ),
    ),
  );

  return $schema;
}
