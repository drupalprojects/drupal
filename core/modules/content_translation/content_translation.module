<?php

/**
 * @file
 * Allows entities to be translated into different languages.
 */

use Drupal\content_translation\Plugin\Derivative\ContentTranslationLocalTasks;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityFormControllerInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinition;
use Drupal\Core\Language\Language;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\TypedData\TranslatableInterface;
use Drupal\node\NodeInterface;

/**
 * Implements HOOK_help().
 */
function content_translation_help($path, $arg) {
  switch ($path) {
    case 'admin/help#content_translation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Content Translation module allows you to create and manage translations for your Drupal site content. You can specify which elements need to be translated at the content-type level for content items and comments, at the vocabulary level for taxonomy terms, and at the site level for user accounts. Other modules may provide additional elements that can be translated. For more information, see the online handbook entry for <a href="!url">Content Translation</a>.', array('!url' => 'http://drupal.org/documentation/modules/translation_entity')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Enabling translation') . '</dt>';
      $output .= '<dd><p>' . t('Before you can translate content, there must be at least two languages added on the <a href="!url">languages administration</a> page.', array('!url' => url('admin/config/regional/language'))) . '</p>';
      $output .= '<p>' . t('After adding languages, <a href="!url">configure translation</a>.', array('!url' => url('admin/config/regional/content-language'))) . '</p>';
      $output .= '<dt>' . t('Translating content') . '</dt>';
      $output .= '<dd>' . t('After enabling translation you can create a new piece of content, or edit existing content and assign it a language. Then, you will see a <em>Translate</em> tab or link that will gives an overview of the translation status for the current content. From there, you can add translations and edit or delete existing translations. This process is similar for every translatable element on your site, such as taxonomy terms, comments or user accounts.') . '</dd>';
      $output .= '<dt>' . t('Changing source language') . '</dt>';
      $output .= '<dd>' . t('When there are two or more possible source languages, selecting a <em>Source language</em> will repopulate the form using the specified source\'s values. For example, French is much closer to Spanish than to Chinese, so changing the French translation\'s source language to Spanish can assist translators.') . '</dd>';
      $output .= '<dt>' . t('Maintaining translations') . '</dt>';
      $output .= '<dd>' . t('If editing content in one language requires that translated versions also be updated to reflect the change, use the <em>Flag other translations as outdated</em> check box to mark the translations as outdated and in need of revision.') . '</dd>';
      $output .= '<dt>' . t('Translation permissions') . '</dt>';
      $output .= '<dd>' . t('The Content Translation module makes a basic set of permissions available. Additional <a href="@permissions">permissions</a> are made available after translation is enabled for each translatable element.', array('@permissions' => url('admin/people/permissions', array('fragment' => 'module-content_translation')))) . '</dd>';
      $output .= '</dl>';
      return $output;

    case 'admin/config/regional/content-language':
      $output = '';
      if (!\Drupal::languageManager()->isMultilingual()) {
        $output .= '<br/>' . t('Before you can translate content, there must be at least two languages added on the <a href="!url">languages administration</a> page.', array('!url' => url('admin/config/regional/language')));
      }
      return $output;
  }
}

/**
 * Implements HOOK_module_implements_alter().
 */
function content_translation_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    // Move some of our hook implementations to the end of the list.
    case 'entity_type_alter':
      $group = $implementations['content_translation'];
      unset($implementations['content_translation']);
      $implementations['content_translation'] = $group;
      break;
  }
}

/**
 * Implements HOOK_language_type_info_alter().
 */
function content_translation_language_types_info_alter(array &$language_types) {
  // Make content language negotiation configurable by removing the 'locked'
  // flag.
  $language_types[Language::TYPE_CONTENT]['locked'] = FALSE;
  unset($language_types[Language::TYPE_CONTENT]['fixed']);
}

/**
 * Implements HOOK_entity_type_alter().
 *
 * The content translation UI relies on the entity info to provide its features.
 * See the documentation of HOOK_entity_type_build() in the Entity API documentation
 * for more details on all the entity info keys that may be defined.
 *
 * To make Content Translation automatically support an entity type some keys
 * may need to be defined, but none of them is required unless the entity path
 * is different from the usual /ENTITY_TYPE/{ENTITY_TYPE} pattern (for instance
 * "/taxonomy/term/{taxonomy_term}"), in which case at least the 'canonical' key
 * in the 'links' entity info property must be defined.
 *
 * Every entity type needs a translation controller to be translated. This can
 * be specified through the 'translation' key in the 'controllers' entity info
 * property. If an entity type is translatable and no translation controller is
 * defined, \Drupal\content_translation\ContentTranslationHandler will be
 * assumed. Every translation controller class must implement
 * \Drupal\content_translation\ContentTranslationHandlerInterface.
 *
 * If the entity paths match the default pattern above and there is no need for
 * an entity-specific translation controller class, Content Translation will
 * provide built-in support for the entity. However enabling translation for
 * each translatable bundle will be required.
 *
 * @see \Drupal\Core\Entity\Annotation\EntityType
 */
function content_translation_entity_type_alter(array &$entity_types) {
  // Provide defaults for translation info.
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  foreach ($entity_types as $entity_type) {
    if ($entity_type->isTranslatable()) {
      if (!$entity_type->hasControllerClass('translation')) {
        $entity_type->setControllerClass('translation', 'Drupal\content_translation\ContentTranslationHandler');
      }

      $translation = $entity_type->get('translation');
      if (!$translation || !isset($translation['content_translation'])) {
        $translation['content_translation'] = array();
      }

      if ($entity_type->hasLinkTemplate('canonical')) {
        // Provide default route names for the translation paths.
        if (!$entity_type->hasLinkTemplate('drupal:content-translation-overview')) {
          $entity_type->setLinkTemplate('drupal:content-translation-overview', "content_translation.translation_overview_" . $entity_type->id());
        }
        // @todo Remove this as soon as menu access checks rely on the
        //   controller. See https://drupal.org/node/2155787.
        $translation['content_translation'] += array(
          'access_callback' => 'content_translation_translate_access',
        );
      }
      $entity_type->set('translation', $translation);
    }
  }
}

/**
 * Implements HOOK_entity_bundle_info_alter().
 */
function content_translation_entity_bundle_info_alter(&$bundles) {
  foreach ($bundles as $entity_type => &$info) {
    foreach ($info as $bundle => &$bundle_info) {
      $enabled = content_translation_get_config($entity_type, $bundle, 'enabled');
      $bundle_info['translatable'] = !empty($enabled);
    }
  }
}

/**
 * Implements HOOK_entity_base_field_info_alter().
 */
function content_translation_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  $translation_settings = \Drupal::config('content_translation.settings')->get($entity_type->id());

  if ($translation_settings) {
    // Currently field translatability is defined per-field but we may want to
    // make it per-instance instead. In that case, we will need to implement
    // HOOK_bundle_field_info_alter() instead.
    $field_settings = array();
    foreach ($translation_settings as $bundle => $settings) {
      $field_settings += !empty($settings['content_translation']['fields']) ? $settings['content_translation']['fields'] : array();
    }

    foreach ($field_settings as $name => $translatable) {
      if (isset($fields[$name]) && $fields[$name] instanceof FieldDefinition) {
        $fields[$name]->setTranslatable((bool) $translatable);
      }
    }
  }
}

/**
 * Implements HOOK_field_info_alter().
 *
 * Content translation extends the @FieldType annotation with following key:
 * - column_groups: contains information about the field type properties
 *   which columns should be synchronized across different translations and
 *   which are translatable. This is useful for instance to translate the
 *   "alt" and "title" textual elements of an image field, while keeping the
 *   same image on every translation.
 *
 *   @see Drupal\image\Plugin\Field\FieldType\imageItem.
 */
function content_translation_field_info_alter(&$info) {
  foreach ($info as $key => $settings) {
    // Supply the column_groups key if it's not there.
    if (empty($settings['column_groups'])) {
      $info[$key]['column_groups'] = array();
    }
  }
}

/**
 * Implements HOOK_entity_operation_alter().
 */
function content_translation_entity_operation_alter(array &$operations, \Drupal\Core\Entity\EntityInterface $entity) {
  // @todo Use an access permission.
  if ($entity instanceof NodeInterface && $entity->isTranslatable()) {
    $operations['translate'] = array(
      'title' => t('Translate'),
    ) + $entity->urlInfo('drupal:content-translation-overview')->toArray();
  }
}

/**
 * Implements HOOK_menu_link_defaults_alter().
 */
function content_translation_menu_link_defaults_alter(array &$links) {
  // Clarify where translation settings are located.
  $links['language.content_settings_page']['title'] = 'Content language and translation';
  $links['language.content_settings_page']['description'] = 'Configure language and translation support for content.';
}

/**
 * Convert an entity canonical link to a router path.
 *
 * @param string $link
 *   The entity link to be converted.
 *
 * @return string
 *   The resulting router path. For instance "/node/{node}" is turned into
 *   "node/%node".
 *
 * @todo Remove this and use the actual link values when all the Content
 *   Translation code is adapted to the new routing system.
 */
function _content_translation_link_to_router_path($entity_type, $link) {
  $path = preg_replace('|{([^}]+)}|', '%$1', trim($link, '/'));
  return str_replace('%id', '%' . $entity_type, $path);
}

/**
 * Strips out menu loaders from the given path.
 *
 * @param string $path
 *   The path to process.
 *
 * @return
 *   The given path where all the menu loaders are replaced with "%".
 */
function _content_translation_menu_strip_loaders($path) {
  return preg_replace('|%[^/]+|', '%', $path);
}

/**
 * Access callback for the translation overview page.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity whose translation overview should be displayed.
 */
function content_translation_translate_access(EntityInterface $entity) {
  return $entity instanceof ContentEntityInterface && empty($entity->getUntranslated()->language()->locked) && \Drupal::languageManager()->isMultilingual() && $entity->isTranslatable() &&
    (user_access('create content translations') || user_access('update content translations') || user_access('delete content translations'));
}

/**
 * Returns the key name used to store the configuration setting.
 *
 * Based on the entity type and bundle, the keys used to store configuration
 * will have a common root name.
 *
 * @param string $entity_type
 *   The type of the entity the setting refers to.
 * @param string $bundle
 *   The bundle of the entity the setting refers to.
 * @param string $setting
 *   The name of the setting.
 *
 * @return string
 *   The key name of the configuration setting.
 *
 * @todo Generalize this logic so that it is available to any module needing
 *   per-bundle configuration.
 */
function content_translation_get_config_key($entity_type, $bundle, $setting) {
  $entity_type = preg_replace('/[^0-9a-zA-Z_]/', "_", $entity_type);
  $bundle = preg_replace('/[^0-9a-zA-Z_]/', "_", $bundle);
  return $entity_type . '.' . $bundle . '.content_translation.' . $setting;
}

/**
 * Retrieves the value for the specified setting.
 *
 * @param string $entity_type
 *   The type of the entity the setting refer to.
 * @param string $bundle
 *   The bundle of the entity the setting refer to.
 * @param string $setting
 *   The name of the setting.
 *
 * @returns mixed
 *   The stored value for the given setting.
 */
function content_translation_get_config($entity_type, $bundle, $setting) {
  $key = content_translation_get_config_key($entity_type, $bundle, $setting);
  return \Drupal::config('content_translation.settings')->get($key);
}

/**
 * Stores the given value for the specified setting.
 *
 * @param string $entity_type
 *   The type of the entity the setting refer to.
 * @param string $bundle
 *   The bundle of the entity the setting refer to.
 * @param string $setting
 *   The name of the setting.
 * @param $value
 *   The value to be stored for the given setting.
 */
function content_translation_set_config($entity_type, $bundle, $setting, $value) {
  $key = content_translation_get_config_key($entity_type, $bundle, $setting);
  return \Drupal::config('content_translation.settings')->set($key, $value)->save();
}

/**
 * Determines whether the given entity type is translatable.
 *
 * @param string $entity_type
 *   The type of the entity.
 * @param string $bundle
 *   (optional) The bundle of the entity. If no bundle is provided, all the
 *   available bundles are checked.
 *
 * @returns
 *   TRUE if the specified bundle is translatable. If no bundle is provided
 *   returns TRUE if at least one of the entity bundles is translatable.
 *
 * @todo Move to \Drupal\content_translation\ContentTranslationManager.
 */
function content_translation_enabled($entity_type, $bundle = NULL) {
  $enabled = FALSE;

  if (\Drupal::service('content_translation.manager')->isSupported($entity_type)) {
    $bundles = !empty($bundle) ? array($bundle) : array_keys(entity_get_bundles($entity_type));
    foreach ($bundles as $bundle) {
      if (content_translation_get_config($entity_type, $bundle, 'enabled')) {
        $enabled = TRUE;
        break;
      }
    }
  }

  return $enabled;
}

/**
 * Content translation controller factory.
 *
 * @param string $entity_type_id
 *   The type of the entity being translated.
 *
 * @return \Drupal\content_translation\ContentTranslationHandlerInterface
 *   An instance of the content translation controller interface.
 *
 * @todo Move to \Drupal\content_translation\ContentTranslationManager.
 */
function content_translation_controller($entity_type_id) {
  $entity_type = \Drupal::entityManager()->getDefinition($entity_type_id);
  // @todo Throw an exception if the key is missing.
  $class = $entity_type->getControllerClass('translation');
  return new $class($entity_type);
}

/**
 * Returns the entity form controller for the given form.
 *
 * @param array $form_state
 *   The form state array holding the entity form controller.
 *
 * @return \Drupal\Core\Entity\EntityFormControllerInterface;
 *   An instance of the content translation form interface or FALSE if not an
 *   entity form.
 *
 * @todo Move to \Drupal\content_translation\ContentTranslationManager.
 */
function content_translation_form_controller(array $form_state) {
  return isset($form_state['controller']) && $form_state['controller'] instanceof EntityFormControllerInterface ? $form_state['controller'] : FALSE;
}

/**
 * Checks whether a content translation is accessible.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity to be accessed.
 * @param $op
 *   The operation to be performed on the translation. Possible values are:
 *   - "view"
 *   - "update"
 *   - "delete"
 *   - "create"
 *
 * @return
 *   TRUE if the current user is allowed to view the translation.
 *
 * @todo Move to \Drupal\content_translation\ContentTranslationManager.
 */
function content_translation_access(EntityInterface $entity, $op) {
  return content_translation_controller($entity->getEntityTypeId())->getTranslationAccess($entity, $op) ;
}

/**
 * Implements HOOK_permission().
 */
function content_translation_permission() {
  $permission = array(
    'administer content translation' => array(
      'title' => t('Administer translation settings'),
      'description' => t('Configure translatability of entities and fields.'),
    ),
    'create content translations' => array(
      'title' => t('Create translations'),
    ),
    'update content translations' => array(
      'title' => t('Edit translations'),
    ),
    'delete content translations' => array(
      'title' => t('Delete translations'),
    ),
    'translate any entity' => array(
      'title' => t('Translate any entity'),
    ),
  );

  // Create a translate permission for each enabled entity type and (optionally)
  // bundle.
  foreach (\Drupal::entityManager()->getDefinitions() as $entity_type_id => $entity_type) {
    if ($permission_granularity = $entity_type->getPermissionGranularity()) {
      $t_args = array('@entity_label' => $entity_type->getLowercaseLabel());

      switch ($permission_granularity) {
        case 'bundle':
          foreach (entity_get_bundles($entity_type_id) as $bundle => $bundle_info) {
            if (content_translation_enabled($entity_type_id, $bundle)) {
              $t_args['%bundle_label'] = isset($bundle_info['label']) ? $bundle_info['label'] : $bundle;
              $permission["translate $bundle $entity_type_id"] = array(
                'title' => t('Translate %bundle_label @entity_label', $t_args),
              );
            }
          }
          break;

        case 'entity_type':
          if (content_translation_enabled($entity_type_id)) {
            $permission["translate $entity_type_id"] = array(
              'title' => t('Translate @entity_label', $t_args),
            );
          }
          break;
      }
    }
  }

  return $permission;
}

/**
 * Implements HOOK_form_alter().
 */
function content_translation_form_alter(array &$form, array &$form_state) {
  $form_controller = content_translation_form_controller($form_state);
  $entity = $form_controller ? $form_controller->getEntity() : NULL;

  if ($entity instanceof ContentEntityInterface && $entity->isTranslatable() && count($entity->getTranslationLanguages()) > 1) {
    $controller = content_translation_controller($entity->getEntityTypeId());
    $controller->entityFormAlter($form, $form_state, $entity);

    // @todo Move the following lines to the code generating the property form
    //   elements once we have an official #multilingual FAPI key.
    $translations = $entity->getTranslationLanguages();
    $form_langcode = $form_controller->getFormLangcode($form_state);

    // Handle fields shared between translations when there is at least one
    // translation available or a new one is being created.
    if (!$entity->isNew() && (!isset($translations[$form_langcode]) || count($translations) > 1)) {
      foreach ($entity->getFieldDefinitions() as $property_name => $definition) {
        if (isset($form[$property_name])) {
          $form[$property_name]['#multilingual'] = $definition->isTranslatable();
        }
      }
    }

  }
}

/**
 * Implements HOOK_language_fallback_candidates_OPERATION_alter().
 *
 * Performs language fallback for unaccessible translations.
 */
function content_translation_language_fallback_candidates_entity_view_alter(&$candidates, $context) {
  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $context['data'];
  $entity_type_id = $entity->getEntityTypeId();
  $entity_type = $entity->getEntityType();
  $permission = $entity_type->getPermissionGranularity() == 'bundle' ? $permission = "translate {$entity->bundle()} $entity_type_id" : "translate $entity_type_id";
  foreach ($entity->getTranslationLanguages() as $langcode => $language) {
    if (empty($entity->translation[$langcode]['status']) && !user_access('translate any entity') && !user_access($permission)) {
      unset($candidates[$langcode]);
    }
  }
}

/**
 * Implements HOOK_entity_load().
 */
function content_translation_entity_load(array $entities, $entity_type) {
  $enabled_entities = array();

  if (content_translation_enabled($entity_type)) {
    foreach ($entities as $entity) {
      if ($entity instanceof ContentEntityInterface && $entity->isTranslatable()) {
        $enabled_entities[$entity->id()] = $entity;
      }
    }
  }

  if (!empty($enabled_entities)) {
    content_translation_load_translation_metadata($enabled_entities, $entity_type);
  }
}

/**
 * Loads translation data into the given entities.
 *
 * @param array $entities
 *   The entities keyed by entity ID.
 * @param string $entity_type
 *   The type of the entities.
 */
function content_translation_load_translation_metadata(array $entities, $entity_type) {
  $query = 'SELECT * FROM {content_translation} te WHERE te.entity_type = :entity_type AND te.entity_id IN (:entity_id)';
  $result = db_query($query, array(':entity_type' => $entity_type, ':entity_id' => array_keys($entities)));
  $exclude = array('entity_type', 'entity_id', 'langcode');
  foreach ($result as $record) {
    $entity = $entities[$record->entity_id];
    // @todo Declare these as entity (translation?) properties.
    foreach ($record as $field_name => $value) {
      if (!in_array($field_name, $exclude)) {
        $langcode = $record->langcode;
        $entity->translation[$langcode][$field_name] = $value;
        if (!$entity->hasTranslation($langcode)) {
          $entity->initTranslation($langcode);
        }
      }
    }
  }
}

/**
 * Implements HOOK_entity_insert().
 */
function content_translation_entity_insert(EntityInterface $entity) {
  // Only do something if translation support for the given entity is enabled.
  if (!($entity instanceof ContentEntityInterface) || !$entity->isTranslatable()) {
    return;
  }

  $fields = array('entity_type', 'entity_id', 'langcode', 'source', 'outdated', 'uid', 'status', 'created', 'changed');
  $query = db_insert('content_translation')->fields($fields);

  foreach ($entity->getTranslationLanguages() as $langcode => $language) {
    $translation = isset($entity->translation[$langcode]) ? $entity->translation[$langcode] : array();

    $translation += array(
      'source' => '',
      'uid' => \Drupal::currentUser()->id(),
      'outdated' => FALSE,
      'status' => TRUE,
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
    );

    $translation['entity_type'] = $entity->getEntityTypeId();
    $translation['entity_id'] = $entity->id();
    $translation['langcode'] = $langcode;

    // Reorder values to match the schema.
    $values = array();
    foreach ($fields as $field_name) {
      $value = is_bool($translation[$field_name]) ? intval($translation[$field_name]) : $translation[$field_name];
      $values[$field_name] = $value;
    }
    $query->values($values);
  }

  $query->execute();
}

/**
 * Implements HOOK_entity_delete().
 */
function content_translation_entity_delete(EntityInterface $entity) {
  // Only do something if translation support for the given entity is enabled.
  if (!($entity instanceof ContentEntityInterface) || !$entity->isTranslatable()) {
    return;
  }

  db_delete('content_translation')
    ->condition('entity_type', $entity->getEntityTypeId())
    ->condition('entity_id', $entity->id())
    ->execute();
}

/**
 * Implements HOOK_entity_update().
 */
function content_translation_entity_update(EntityInterface $entity) {
  // Only do something if translation support for the given entity is enabled.
  if (!($entity instanceof ContentEntityInterface) || !$entity->isTranslatable()) {
    return;
  }

  // Delete and create to ensure no stale value remains behind.
  content_translation_entity_delete($entity);
  content_translation_entity_insert($entity);
}

/**
 * Implements HOOK_entity_extra_field_info().
 */
function content_translation_entity_extra_field_info() {
  $extra = array();

  foreach (\Drupal::entityManager()->getDefinitions() as $entity_type => $info) {
    foreach (entity_get_bundles($entity_type) as $bundle => $bundle_info) {
      if (content_translation_enabled($entity_type, $bundle)) {
        $extra[$entity_type][$bundle]['form']['translation'] = array(
          'label' => t('Translation'),
          'description' => t('Translation settings'),
          'weight' => 10,
        );
      }
    }
  }

  return $extra;
}

/**
 * Implements HOOK_form_FORM_ID_alter() for 'field_ui_field_edit_form'.
 */
function content_translation_form_field_ui_field_edit_form_alter(array &$form, array &$form_state, $form_id) {
  $field = $form['#field'];
  $bundle = $form['#bundle'];
  $bundle_is_translatable = content_translation_enabled($field->entity_type, $bundle);
  $form['field']['translatable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Users may translate this field.'),
    '#default_value' => $field->isTranslatable(),
    '#weight' => 20,
    '#disabled' => !$bundle_is_translatable,
  );
  $form['#submit'][] = 'content_translation_form_field_ui_field_edit_form_submit';

  // Provide helpful pointers for administrators.
  if (\Drupal::currentUser()->hasPermission('administer content translation') &&  !$bundle_is_translatable) {
    $toggle_url = url('admin/config/regional/content-language', array(
      'query' => drupal_get_destination(),
    ));
    $form['field']['translatable']['#description'] = t('To enable translation of this field, <a href="@language-settings-url">enable language support</a> for this type.', array(
      '@language-settings-url' => $toggle_url,
    ));
  }
}

/**
 * Form submission handler for 'field_ui_field_edit_form'.
 */
function content_translation_form_field_ui_field_edit_form_submit($form, array &$form_state) {
  $instance = $form_state['instance'];
  $value = content_translation_get_config($instance->entity_type, $instance->bundle, 'fields');
  if (!isset($value)) {
    $value = array();
  }
  $value[$instance->getField()->getName()] = $form_state['values']['field']['translatable'];
  // Store the same value for all bundles as translatability is tracked per
  // field.
  foreach (entity_get_bundles($instance->entity_type) as $bundle => $info) {
    content_translation_set_config($instance->entity_type, $bundle, 'fields', $value);
  }
}

/**
 * Implements HOOK_form_FORM_ID_alter() for 'field_ui_field_instance_edit_form'.
 */
function content_translation_form_field_ui_field_instance_edit_form_alter(array &$form, array &$form_state, $form_id) {
  if ($form_state['instance']->isTranslatable()) {
    module_load_include('inc', 'content_translation', 'content_translation.admin');
    $element = content_translation_field_sync_widget($form_state['instance']);
    if ($element) {
      $form['instance']['settings']['translation_sync'] = $element;
    }
  }
}

/**
 * Implements HOOK_entity_presave().
 */
function content_translation_entity_presave(EntityInterface $entity) {
  // By default no column has to be synchronized.
  // @todo Replace with own storage in https://drupal.org/node/2224761
  if ($entity->getEntityTypeId() === 'field_config') {
    $entity->settings += array('translation_sync' => FALSE);
  }
  // Synchronization can be enabled per instance.
  // @todo Replace with own storage in https://drupal.org/node/2224761
  if ($entity->getEntityTypeId() === 'field_instance_config') {
    $entity->settings += array('translation_sync' => FALSE);
  }
  if ($entity instanceof ContentEntityInterface && $entity->isTranslatable()) {
    // @todo Avoid using request attributes once translation metadata become
    //   regular fields.
    $attributes = \Drupal::request()->attributes;
    \Drupal::service('content_translation.synchronizer')->synchronizeFields($entity, $entity->language()->id, $attributes->get('source_langcode'));
  }
}

/**
 * Implements HOOK_element_info_alter().
 */
function content_translation_element_info_alter(&$type) {
  if (isset($type['language_configuration'])) {
    $type['language_configuration']['#process'][] = 'content_translation_language_configuration_element_process';
  }
}

/**
 * Returns a widget to enable content translation per entity bundle.
 *
 * Backward compatibility layer to support entities not using the language
 * configuration form element.
 *
 * @todo Remove once all core entities have language configuration.
 *
 * @param string $entity_type
 *   The type of the entity being configured for translation.
 * @param string $bundle
 *   The bundle of the entity being configured for translation.
 * @param array $form
 *   The configuration form array.
 * @param array $form_state
 *   The configuration form state array.
 */
function content_translation_enable_widget($entity_type, $bundle, array &$form, array &$form_state) {
  $key = $form_state['content_translation']['key'];
  if (!isset($form_state['language'][$key])) {
    $form_state['language'][$key] = array();
  }
  $form_state['language'][$key] += array('entity_type' => $entity_type, 'bundle' => $bundle);
  $element = content_translation_language_configuration_element_process(array('#name' => $key), $form_state, $form);
  unset($element['content_translation']['#element_validate']);
  return $element;
}

/**
 * Process callback: Expands the language_configuration form element.
 *
 * @param array $element
 *   Form API element.
 *
 * @return
 *   Processed language configuration element.
 */
function content_translation_language_configuration_element_process(array $element, array &$form_state, array &$form) {
  if (empty($element['#content_translation_skip_alter']) && user_access('administer content translation')) {
    $form_state['content_translation']['key'] = $element['#name'];
    $context = $form_state['language'][$element['#name']];

    $element['content_translation'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable translation'),
      '#default_value' => content_translation_enabled($context['entity_type'], $context['bundle']),
      '#element_validate' => array('content_translation_language_configuration_element_validate'),
      '#prefix' => '<label>' . t('Translation') . '</label>',
    );

    $form['actions']['submit']['#submit'][] = 'content_translation_language_configuration_element_submit';
  }
  return $element;
}

/**
 * Form validation handler for element added with content_translation_language_configuration_element_process().
 *
 * Checks whether translation can be enabled: if language is set to one of the
 * special languages and language selector is not hidden, translation cannot be
 * enabled.
 *
 * @see content_translation_language_configuration_element_submit()
 */
function content_translation_language_configuration_element_validate($element, array &$form_state, array $form) {
  $key = $form_state['content_translation']['key'];
  $values = $form_state['values'][$key];
  if (!$values['language_show'] && $values['content_translation'] && \Drupal::languageManager()->isLanguageLocked($values['langcode'])) {
    foreach (\Drupal::languageManager()->getLanguages(Language::STATE_LOCKED) as $language) {
      $locked_languages[] = $language->name;
    }
    // @todo Set the correct form element name as soon as the element parents
    //   are correctly set. We should be using NestedArray::getValue() but for
    //   now we cannot.
    form_set_error('', $form_state, t('"Show language selector" is not compatible with translating content that has default language: %choice. Either do not hide the language selector or pick a specific language.', array('%choice' => $locked_languages[$values['langcode']])));
  }
}

/**
 * Form submission handler for element added with content_translation_language_configuration_element_process().
 *
 * Stores the content translation settings.
 *
 * @see content_translation_language_configuration_element_validate()
 */
function content_translation_language_configuration_element_submit(array $form, array &$form_state) {
  $key = $form_state['content_translation']['key'];
  $context = $form_state['language'][$key];
  $enabled = $form_state['values'][$key]['content_translation'];

  if (content_translation_enabled($context['entity_type'], $context['bundle']) != $enabled) {
    content_translation_set_config($context['entity_type'], $context['bundle'], 'enabled', $enabled);
    entity_info_cache_clear();
    \Drupal::service('router.builder')->setRebuildNeeded();
  }
}

/**
 * Implements HOOK_form_FORM_ID_alter() for language_content_settings_form().
 */
function content_translation_form_language_content_settings_form_alter(array &$form, array &$form_state) {
  module_load_include('inc', 'content_translation', 'content_translation.admin');
  _content_translation_form_language_content_settings_form_alter($form, $form_state);
}

/**
 * Implements HOOK_preprocess_HOOK() for theme_language_content_settings_table().
 */
function content_translation_preprocess_language_content_settings_table(&$variables) {
  module_load_include('inc', 'content_translation', 'content_translation.admin');
  _content_translation_preprocess_language_content_settings_table($variables);
}

/**
 * Stores content translation settings.
 *
 * @param array $settings
 *   An associative array of settings keyed by entity type and bundle. At bundle
 *   level the following keys are available:
 *   - translatable: The bundle translatability status, which is a bool.
 *   - settings: An array of language configuration settings as defined by
 *     language_save_default_configuration().
 *   - fields: An associative array with field names as keys and a boolean as
 *     value, indicating field translatability.
 *   - columns: An associative array of translation synchronization settings
 *     keyed by field names.
 */
function content_translation_save_settings($settings) {
  foreach ($settings as $entity_type => $entity_settings) {
    foreach ($entity_settings as $bundle => $bundle_settings) {
      // The 'translatable' value is set only if it is possible to enable.
      if (isset($bundle_settings['translatable'])) {
        // Store whether a bundle has translation enabled or not.
        content_translation_set_config($entity_type, $bundle, 'enabled', $bundle_settings['translatable']);

        // Store whether fields are translatable or not.
        if (!empty($bundle_settings['fields'])) {
          content_translation_set_config($entity_type, $bundle, 'fields', $bundle_settings['fields']);
        }

        // Store whether fields have translation enabled or not.
        if (!empty($bundle_settings['columns'])) {
          foreach ($bundle_settings['columns'] as $field_name => $column_settings) {
            $instance = field_info_instance($entity_type, $field_name, $bundle);
            if ($instance->isTranslatable()) {
              $instance->settings['translation_sync'] = $column_settings;
            }
            // If the field does not have translatable enabled we need to reset
            // the sync settings to their defaults.
            else {
              unset($instance->settings['translation_sync']);
            }
            $instance->save();
          }
        }
      }
    }
  }

  // Ensure entity and menu router information are correctly rebuilt.
  entity_info_cache_clear();
  \Drupal::service('router.builder')->setRebuildNeeded();
}
