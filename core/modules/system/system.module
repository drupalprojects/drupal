<?php

/**
 * @file
 * Configuration system that lets administrators modify the workings of the site.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Language\Language;
use Drupal\Core\Extension\Extension;
use Drupal\Core\Extension\ExtensionDiscovery;
use Drupal\block\BlockPluginInterface;
use Drupal\user\UserInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use GuzzleHttp\Exception\RequestException;

/**
 * New users will be set to the default time zone at registration.
 */
const DRUPAL_USER_TIMEZONE_DEFAULT = 0;

/**
 * New users will get an empty time zone at registration.
 */
const DRUPAL_USER_TIMEZONE_EMPTY = 1;

/**
 * New users will select their own timezone at registration.
 */
const DRUPAL_USER_TIMEZONE_SELECT = 2;

 /**
 * Disabled option on forms and settings
 */
const DRUPAL_DISABLED = 0;

/**
 * Optional option on forms and settings
 */
const DRUPAL_OPTIONAL = 1;

/**
 * Required option on forms and settings
 */
const DRUPAL_REQUIRED = 2;

/**
 * Return only visible regions.
 *
 * @see system_region_list()
 */
const REGIONS_VISIBLE = 'visible';

/**
 * Return all regions.
 *
 * @see system_region_list()
 */
const REGIONS_ALL = 'all';

/**
 * Defines the max length for an email address
 *
 * The maximum length of an e-mail address is 254 characters. RFC 3696
 * specifies a total length of 320 characters, but mentions that
 * addresses longer than 256 characters are not normally useful. Erratum
 * 1690 was then released which corrected this value to 254 characters.
 * @see http://tools.ietf.org/html/rfc3696#section-3
 * @see http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690
 */
const EMAIL_MAX_LENGTH = 254;

/**
 * Implements HOOK_help().
 */
function system_help($path, $arg) {
  global $base_url;

  switch ($path) {
    case 'admin/help#system':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The System module is integral to the site, and provides basic but extensible functionality for use by other modules and themes. Some integral elements of Drupal are contained in and managed by the System module, including caching, enabling and disabling modules and themes, preparing and displaying the administrative page, and configuring fundamental site settings. A number of key system maintenance operations are also part of the System module. For more information, see the online handbook entry for <a href="@system">System module</a>.', array('@system' => 'http://drupal.org/documentation/modules/system')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Managing modules') . '</dt>';
      $output .= '<dd>' . t('The System module allows users with the appropriate permissions to enable and disable modules on the <a href="@modules">Modules administration page</a>. Drupal comes with a number of core modules, and each module provides a discrete set of features and may be enabled or disabled depending on the needs of the site. Many additional modules contributed by members of the Drupal community are available for download at the <a href="@drupal-modules">Drupal.org module page</a>.', array('@modules' => url('admin/modules'), '@drupal-modules' => 'http://drupal.org/project/modules')) . '</dd>';
      $output .= '<dt>' . t('Managing themes') . '</dt>';
      $output .= '<dd>' . t('The System module allows users with the appropriate permissions to enable and disable themes on the <a href="@themes">Appearance administration page</a>. Themes determine the design and presentation of your site. Drupal comes packaged with several core themes, and additional contributed themes are available at the <a href="@drupal-themes">Drupal.org theme page</a>.', array('@themes' => url('admin/appearance'), '@drupal-themes' => 'http://drupal.org/project/themes')) . '</dd>';
      $output .= '<dt>' . t('Managing caching') . '</dt>';
      $output .= '<dd>' . t("The System module allows users with the appropriate permissions to manage caching on the <a href='@cache-settings'>Performance settings page</a>. Drupal has a robust caching system that allows the efficient re-use of previously-constructed web pages and web page components. Pages requested by anonymous users are stored in a compressed format; depending on your site configuration and the amount of your web traffic tied to anonymous visitors, the caching system may significantly increase the speed of your site.", array('@cache-settings' => url('admin/config/development/performance'))) . '</dd>';
      $output .= '<dt>' . t('Performing system maintenance') . '</dt>';
      $output .= '<dd>' . t('In order for the site and its modules to continue to operate well, a set of routine administrative operations must run on a regular basis. The System module manages this task by making use of a system cron job. You can verify the status of cron tasks by visiting the <a href="@status">Status report page</a>. For more information, see the online handbook entry for <a href="@handbook">configuring cron jobs</a>. You can set up cron job by visiting <a href="@cron">Cron configuration</a> page', array('@status' => url('admin/reports/status'), '@handbook' => 'http://drupal.org/cron', '@cron' => url('admin/config/system/cron'))) . '</dd>';
      $output .= '<dt>' . t('Configuring basic site settings') . '</dt>';
      $output .= '<dd>' . t('The System module also handles basic configuration options for your site, including <a href="@date-time-settings">Date and time settings</a>, <a href="@file-system">File system settings</a>, <a href="@site-info">Site name and other information</a>, and a <a href="@maintenance-mode">Maintenance mode</a> for taking your site temporarily offline.', array('@date-time-settings' => url('admin/config/regional/date-time'), '@file-system' => url('admin/config/media/file-system'), '@site-info' => url('admin/config/system/site-information'), '@maintenance-mode' => url('admin/config/development/maintenance'))) . '</dd>';
      $output .= '</dl>';
      return $output;
    case 'admin/index':
      return '<p>' . t('This page shows you all available administration tasks for each module.') . '</p>';
    case 'admin/appearance':
      $output = '<p>' . t('Set and configure the default theme for your website.  Alternative <a href="@themes">themes</a> are available.', array('@themes' => 'http://drupal.org/project/themes')) . '</p>';
      return $output;
    case 'admin/appearance/settings/' . $arg[3]:
      $theme_list = list_themes();
      $theme = $theme_list[$arg[3]];
      return '<p>' . t('These options control the display settings for the %name theme. When your site is displayed using this theme, these settings will be used.', array('%name' => $theme->info['name'])) . '</p>';
    case 'admin/appearance/settings':
      return '<p>' . t('These options control the default display settings for your entire site, across all themes. Unless they have been overridden by a specific theme, these settings will be used.') . '</p>';
    case 'admin/modules':
      $output = '<p>' . t('Download additional <a href="@modules">contributed modules</a> to extend Drupal\'s functionality.', array('@modules' => 'http://drupal.org/project/modules')) . '</p>';
      if (\Drupal::moduleHandler()->moduleExists('update')) {
        if (update_manager_access()) {
          $output .= '<p>' . t('Regularly review and install <a href="@updates">available updates</a> to maintain a secure and current site. Always run the <a href="@update-php">update script</a> each time a module is updated.', array('@update-php' => $base_url . '/core/update.php', '@updates' => url('admin/reports/updates'))) . '</p>';
        }
        else {
          $output .= '<p>' . t('Regularly review <a href="@updates">available updates</a> to maintain a secure and current site. Always run the <a href="@update-php">update script</a> each time a module is updated.', array('@update-php' => $base_url . '/core/update.php', '@updates' => url('admin/reports/updates'))) . '</p>';
        }
      }
      else {
        $output .= '<p>' . t('Regularly review available updates to maintain a secure and current site. Always run the <a href="@update-php">update script</a> each time a module is updated. Enable the Update Manager module to update and install modules and themes.', array('@update-php' => $base_url . '/core/update.php')) . '</p>';
      }
      return $output;
    case 'admin/modules/uninstall':
      return '<p>' . t('The uninstall process removes all data related to a module.') . '</p>';
    case 'admin/structure/block/manage':
      if ($arg[4] == 'system' && $arg[5] == 'powered-by') {
        return '<p>' . t('The <em>Powered by Drupal</em> block is an optional link to the home page of the Drupal project. While there is absolutely no requirement that sites feature this link, it may be used to show support for Drupal.') . '</p>';
      }
      break;
    case 'admin/config/development/maintenance':
      if (\Drupal::currentUser()->id() == 1) {
        return '<p>' . t('Use maintenance mode when making major updates, particularly if the updates could disrupt visitors or the update process. Examples include upgrading, importing or exporting content, modifying a theme, modifying content types, and making backups.') . '</p>';
      }
      break;
    case 'admin/reports/status':
      return '<p>' . t("Here you can find a short overview of your site's parameters as well as any problems detected with your installation. It may be useful to copy and paste this information into support requests filed on drupal.org's support forums and project issue queues. Before filing a support request, ensure that your web server meets the <a href=\"@system-requirements\">system requirements.</a>", array('@system-requirements' => 'http://drupal.org/requirements')) . '</p>';
  }
}

/**
 * Implements HOOK_theme().
 */
function system_theme() {
  return array_merge(drupal_common_theme(), array(
    // Normally theme suggestion templates are only picked up when they are in
    // themes. We explicitly define the block__system_branding_block theme
    // suggestion here so that the template in core/modules/system/templates
    // is picked up.
    'block__system_branding_block' => array(
      'base hook' => 'block',
      'template' => 'block--system-branding-block',
    ),
    'system_themes_page' => array(
      'variables' => array(
        'theme_groups' => array(),
        'theme_group_titles' => array(),
      ),
      'file' => 'system.admin.inc',
      'template' => 'system-themes-page',
    ),
    'system_config_form' => array(
      'render element' => 'form',
    ),
    'confirm_form' => array(
      'render element' => 'form',
      'template' => 'confirm-form',
    ),
    'system_modules_details' => array(
      'render element' => 'form',
      'file' => 'system.admin.inc',
    ),
    'system_modules_uninstall' => array(
      'render element' => 'form',
      'file' => 'system.admin.inc',
    ),
    'status_report' => array(
      'variables' => array('requirements' => NULL),
      'file' => 'system.admin.inc',
      'template' => 'status-report',
    ),
    'admin_page' => array(
      'variables' => array('blocks' => NULL),
      'file' => 'system.admin.inc',
      'template' => 'admin-page',
    ),
    'admin_block' => array(
      'variables' => array('block' => NULL),
      'file' => 'system.admin.inc',
      'template' => 'admin-block',
    ),
    'admin_block_content' => array(
      'variables' => array('content' => NULL),
      'file' => 'system.admin.inc',
      'template' => 'admin-block-content',
    ),
    'system_admin_index' => array(
      'variables' => array('menu_items' => NULL),
      'file' => 'system.admin.inc',
    ),
    'system_compact_link' => array(
      'variables' => array(),
    ),
  ));
}

/**
 * Implements HOOK_permission().
 */
function system_permission() {
  return array(
    'administer modules' => array(
      'title' => t('Administer modules'),
    ),
    'administer site configuration' => array(
      'title' => t('Administer site configuration'),
      'restrict access' => TRUE,
    ),
    'administer themes' => array(
      'title' => t('Administer themes'),
    ),
    'administer software updates' => array(
      'title' => t('Administer software updates'),
      'restrict access' => TRUE,
    ),
    'access administration pages' => array(
      'title' => t('Use the administration pages and help'),
    ),
    'access site in maintenance mode' => array(
      'title' => t('Use the site in maintenance mode'),
    ),
    'view the administration theme' => array(
      'title' => t('View the administration theme'),
      'description' => t('This is only used when the site is configured to use a separate administration theme on the <a href="@appearance-url">Appearance</a> page.', array('@appearance-url' => url('admin/appearance'))),
    ),
    'access site reports' => array(
      'title' => t('View site reports'),
    ),
  );
}

/**
 * Implements HOOK_HOOK_info().
 */
function system_HOOK_info() {
  $hooks['token_info'] = array(
    'group' => 'tokens',
  );
  $hooks['token_info_alter'] = array(
    'group' => 'tokens',
  );
  $hooks['tokens'] = array(
    'group' => 'tokens',
  );
  $hooks['tokens_alter'] = array(
    'group' => 'tokens',
  );

  return $hooks;
}

/**
 * Implements HOOK_element_info().
 */
function system_element_info() {
  // Top level elements.
  $types['html'] = array(
    '#theme' => 'html',
    '#pre_render' => array('drupal_pre_render_html'),
    // HTML5 Shiv
    '#attached' => array(
      'library' => array('core/html5shiv'),
    ),
  );
  $types['form'] = array(
    '#method' => 'post',
    '#action' => request_uri(),
    '#theme_wrappers' => array('form'),
  );
  $types['page'] = array(
    '#show_messages' => TRUE,
    '#pre_render' => array('drupal_pre_render_page'),
    '#theme' => 'page',
    '#title' => '',
  );
  // By default, we don't want Ajax commands being rendered in the context of an
  // HTML page, so we don't provide defaults for #theme or #theme_wrappers.
  // However, modules can set these properties (for example, to provide an HTML
  // debugging page that displays rather than executes Ajax commands).
  $types['ajax'] = array(
    '#header' => TRUE,
    '#commands' => array(),
    '#error' => NULL,
  );
  $types['html_tag'] = array(
    '#pre_render' => array('drupal_pre_render_conditional_comments', 'drupal_pre_render_html_tag'),
    '#attributes' => array(),
    '#value' => NULL,
  );
  $types['styles'] = array(
    '#items' => array(),
    '#pre_render' => array('drupal_pre_render_styles'),
  );
  $types['scripts'] = array(
    '#items' => array(),
    '#pre_render' => array('drupal_pre_render_scripts'),
  );

  // Input elements.
  $types['submit'] = array(
    '#input' => TRUE,
    '#name' => 'op',
    '#is_button' => TRUE,
    '#executes_submit_callback' => TRUE,
    '#limit_validation_errors' => FALSE,
    '#process' => array('form_process_button', 'ajax_process_form'),
    '#pre_render' => array('form_pre_render_button'),
    '#theme_wrappers' => array('input__submit'),
  );
  $types['button'] = array(
    '#input' => TRUE,
    '#name' => 'op',
    '#is_button' => TRUE,
    '#executes_submit_callback' => FALSE,
    '#limit_validation_errors' => FALSE,
    '#process' => array('form_process_button', 'ajax_process_form'),
    '#pre_render' => array('form_pre_render_button'),
    '#theme_wrappers' => array('input__button'),
  );
  $types['image_button'] = array(
    '#input' => TRUE,
    '#is_button' => TRUE,
    '#executes_submit_callback' => TRUE,
    '#limit_validation_errors' => FALSE,
    '#process' => array('form_process_button', 'ajax_process_form'),
    '#return_value' => TRUE,
    '#has_garbage_value' => TRUE,
    '#src' => NULL,
    '#pre_render' => array('form_pre_render_image_button'),
    '#theme_wrappers' => array('input__image_button'),
  );
  $types['textfield'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 128,
    '#autocomplete_route_name' => FALSE,
    '#process' => array('form_process_autocomplete', 'ajax_process_form', 'form_process_pattern', 'form_process_group'),
    '#pre_render' => array('form_pre_render_textfield', 'form_pre_render_group'),
    '#theme' => 'input__textfield',
    '#theme_wrappers' => array('form_element'),
  );
  $types['tel'] = array(
    '#input' => TRUE,
    '#size' => 30,
    '#maxlength' => 128,
    '#autocomplete_route_name' => FALSE,
    '#process' => array('form_process_autocomplete', 'ajax_process_form', 'form_process_pattern'),
    '#pre_render' => array('form_pre_render_tel'),
    '#theme' => 'input__tel',
    '#theme_wrappers' => array('form_element'),
  );
  $types['email'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => EMAIL_MAX_LENGTH,
    '#autocomplete_route_name' => FALSE,
    '#process' => array('form_process_autocomplete', 'ajax_process_form', 'form_process_pattern'),
    '#element_validate' => array('form_validate_email'),
    '#pre_render' => array('form_pre_render_email'),
    '#theme' => 'input__email',
    '#theme_wrappers' => array('form_element'),
  );
  $types['url'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 255,
    '#autocomplete_route_name' => FALSE,
    '#process' => array('form_process_autocomplete', 'ajax_process_form', 'form_process_pattern'),
    '#element_validate' => array('form_validate_url'),
    '#pre_render' => array('form_pre_render_url'),
    '#theme' => 'input__url',
    '#theme_wrappers' => array('form_element'),
  );
  $types['search'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 128,
    '#autocomplete_route_name' => FALSE,
    '#process' => array('form_process_autocomplete', 'ajax_process_form'),
    '#pre_render' => array('form_pre_render_search'),
    '#theme' => 'input__search',
    '#theme_wrappers' => array('form_element'),
  );
  $types['number'] = array(
    '#input' => TRUE,
    '#step' => 1,
    '#process' => array('ajax_process_form'),
    '#element_validate' => array('form_validate_number'),
    '#pre_render' => array('form_pre_render_number'),
    '#theme' => 'input__number',
    '#theme_wrappers' => array('form_element'),
  );
  $types['range'] = array(
    '#input' => TRUE,
    '#step' => 1,
    '#min' => 0,
    '#max' => 100,
    '#process' => array('ajax_process_form'),
    '#element_validate' => array('form_validate_number'),
    '#pre_render' => array('form_pre_render_range'),
    '#theme' => 'input__range',
    '#theme_wrappers' => array('form_element'),
  );
  $types['color'] = array(
    '#input' => TRUE,
    '#process' => array('ajax_process_form'),
    '#element_validate' => array('form_validate_color'),
    '#pre_render' => array('form_pre_render_color'),
    '#theme' => 'input__color',
    '#theme_wrappers' => array('form_element'),
  );
  $types['machine_name'] = array(
    '#input' => TRUE,
    '#default_value' => NULL,
    '#required' => TRUE,
    '#maxlength' => 64,
    '#size' => 60,
    '#autocomplete_route_name' => FALSE,
    '#process' => array('form_process_machine_name', 'form_process_autocomplete', 'ajax_process_form'),
    '#element_validate' => array('form_validate_machine_name'),
    '#pre_render' => array('form_pre_render_textfield'),
    '#theme' => 'input__textfield',
    '#theme_wrappers' => array('form_element'),
  );
  $types['password'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 128,
    '#process' => array('ajax_process_form', 'form_process_pattern'),
    '#pre_render' => array('form_pre_render_password'),
    '#theme' => 'input__password',
    '#theme_wrappers' => array('form_element'),
  );
  $types['password_confirm'] = array(
    '#input' => TRUE,
    '#process' => array('form_process_password_confirm', 'user_form_process_password_confirm'),
    '#theme_wrappers' => array('form_element'),
  );
  $types['textarea'] = array(
    '#input' => TRUE,
    '#cols' => 60,
    '#rows' => 5,
    '#resizable' => 'vertical',
    '#process' => array('ajax_process_form', 'form_process_group'),
    '#pre_render' => array('form_pre_render_group'),
    '#theme' => 'textarea',
    '#theme_wrappers' => array('form_element'),
  );
  $types['radios'] = array(
    '#input' => TRUE,
    '#process' => array('form_process_radios'),
    '#theme_wrappers' => array('radios'),
    '#pre_render' => array('form_pre_render_conditional_form_element'),
  );
  $types['radio'] = array(
    '#input' => TRUE,
    '#default_value' => NULL,
    '#process' => array('ajax_process_form'),
    '#pre_render' => array('form_pre_render_radio'),
    '#theme' => 'input__radio',
    '#theme_wrappers' => array('form_element'),
    '#title_display' => 'after',
  );
  $types['checkboxes'] = array(
    '#input' => TRUE,
    '#process' => array('form_process_checkboxes'),
    '#pre_render' => array('form_pre_render_conditional_form_element'),
    '#theme_wrappers' => array('checkboxes'),
  );
  $types['checkbox'] = array(
    '#input' => TRUE,
    '#return_value' => 1,
    '#process' => array('form_process_checkbox', 'ajax_process_form', 'form_process_group'),
    '#pre_render' => array('form_pre_render_checkbox', 'form_pre_render_group'),
    '#theme' => 'input__checkbox',
    '#theme_wrappers' => array('form_element'),
    '#title_display' => 'after',
  );
  $types['select'] = array(
    '#input' => TRUE,
    '#multiple' => FALSE,
    '#process' => array('form_process_select', 'ajax_process_form'),
    '#theme' => 'select',
    '#theme_wrappers' => array('form_element'),
    '#options' => array(),
  );
  $types['language_select'] = array(
    '#input' => TRUE,
    '#default_value' => Language::LANGCODE_NOT_SPECIFIED,
  );
  $types['weight'] = array(
    '#input' => TRUE,
    '#delta' => 10,
    '#default_value' => 0,
    '#process' => array('form_process_weight', 'ajax_process_form'),
  );
  $types['date'] = array(
    '#input' => TRUE,
    '#theme' => 'date',
    '#theme_wrappers' => array('form_element'),
  );
  $types['file'] = array(
    '#input' => TRUE,
    '#multiple' => FALSE,
    '#process' => array('form_process_file'),
    '#size' => 60,
    '#pre_render' => array('form_pre_render_file'),
    '#theme' => 'input__file',
    '#theme_wrappers' => array('form_element'),
  );
  $types['tableselect'] = array(
    '#input' => TRUE,
    '#js_select' => TRUE,
    '#multiple' => TRUE,
    '#process' => array('form_process_tableselect'),
    '#options' => array(),
    '#empty' => '',
    '#theme' => 'tableselect',
  );

  // Form structure.
  $types['label'] = array(
    '#theme' => 'form_element_label',
  );
  $types['item'] = array(
    // Forms that show author fields to both anonymous and authenticated users
    // need to dynamically switch between #type 'textfield' and #type 'item' to
    // automatically take over the authenticated user's information. Therefore,
    // we allow #type 'item' to receive input, which is internally assigned by
    // Form API based on the #default_value or #value properties.
    '#input' => TRUE,
    '#markup' => '',
    '#theme_wrappers' => array('form_element'),
  );
  $types['hidden'] = array(
    '#input' => TRUE,
    '#process' => array('ajax_process_form'),
    '#pre_render' => array('form_pre_render_hidden'),
    '#theme' => 'input__hidden',
  );
  $types['token'] = array(
    '#input' => TRUE,
    '#pre_render' => array('form_pre_render_hidden'),
    '#theme' => 'input__hidden',
  );
  $types['value'] = array(
    '#input' => TRUE,
  );
  $types['link'] = array(
    '#pre_render' => array('drupal_pre_render_link'),
  );
  $types['fieldset'] = array(
    '#value' => NULL,
    '#process' => array('form_process_group', 'ajax_process_form'),
    '#pre_render' => array('form_pre_render_group'),
    '#theme_wrappers' => array('fieldset'),
  );
  $types['fieldgroup'] = $types['fieldset'] + array(
    '#attributes' => array('class' => array('fieldgroup')),
  );
  $types['details'] = array(
    '#open' => FALSE,
    '#value' => NULL,
    '#process' => array('form_process_group', 'ajax_process_form'),
    '#pre_render' => array('form_pre_render_details', 'form_pre_render_group'),
    '#theme_wrappers' => array('details'),
  );
  $types['vertical_tabs'] = array(
    '#default_tab' => '',
    '#process' => array('form_process_vertical_tabs'),
    '#pre_render' => array('form_pre_render_vertical_tabs'),
    '#theme_wrappers' => array('vertical_tabs', 'form_element'),
  );
  $types['dropbutton'] = array(
    '#pre_render' => array('drupal_pre_render_dropbutton'),
    '#theme' => 'links__dropbutton',
  );
  $types['operations'] = array(
    '#pre_render' => array('drupal_pre_render_dropbutton'),
    '#theme' => 'links__dropbutton__operations',
  );

  $types['container'] = array(
    '#process' => array('form_process_group', 'form_process_container'),
    '#pre_render' => array('form_pre_render_group'),
    '#theme_wrappers' => array('container'),
  );
  $types['actions'] = array(
    '#process' => array('form_pre_render_actions_dropbutton', 'form_process_actions', 'form_process_container'),
    '#weight' => 100,
    '#theme_wrappers' => array('container'),
  );

  $types['table'] = array(
    '#header' => array(),
    '#rows' => array(),
    '#empty' => '',
    // Properties for tableselect support.
    '#input' => TRUE,
    '#tree' => TRUE,
    '#tableselect' => FALSE,
    '#sticky' => FALSE,
    '#responsive' => TRUE,
    '#multiple' => TRUE,
    '#js_select' => TRUE,
    '#value_callback' => 'form_type_table_value',
    '#process' => array('form_process_table'),
    '#element_validate' => array('form_validate_table'),
    // Properties for tabledrag support.
    // The value is a list of arrays that are passed to
    // drupal_attach_tabledrag(). drupal_pre_render_table() prepends the HTML ID
    // of the table to each set of options.
    // @see drupal_attach_tabledrag()
    '#tabledrag' => array(),
    // Render properties.
    '#pre_render' => array('drupal_pre_render_table'),
    '#theme' => 'table',
  );

  // Other elements.
  $types['render_cache_placeholder'] = array(
    '#callback' => '',
    '#context' => array(),
  );

  return $types;
}

/**
 * Implements HOOK_theme_suggestions_HOOK().
 */
function system_theme_suggestions_html(array $variables) {
  return theme_get_suggestions(arg(), 'html');
}

/**
 * Implements HOOK_theme_suggestions_HOOK().
 */
function system_theme_suggestions_page(array $variables) {
  return theme_get_suggestions(arg(), 'page');
}

/**
 * Implements HOOK_theme_suggestions_HOOK().
 */
function system_theme_suggestions_maintenance_page(array $variables) {
  $suggestions = array();

  // Dead databases will show error messages so supplying this template will
  // allow themers to override the page and the content completely.
  $offline = defined('MAINTENANCE_MODE');
  try {
    drupal_is_front_page();
  }
  catch (Exception $e) {
    // The database is not yet available.
    $offline = TRUE;
  }
  if ($offline) {
    $suggestions[] = 'maintenance_page__offline';
  }

  return $suggestions;
}

/**
 * Implements HOOK_theme_suggestions_HOOK().
 */
function system_theme_suggestions_region(array $variables) {
  $suggestions = array();
  if (!empty($variables['elements']['#region'])) {
    $suggestions[] = 'region__' . $variables['elements']['#region'];
  }
  return $suggestions;
}

/**
 * Implements HOOK_theme_suggestions_HOOK().
 */
function system_theme_suggestions_field(array $variables) {
  $suggestions = array();
  $element = $variables['element'];

  $suggestions[] = 'field__' . $element['#field_type'];
  $suggestions[] = 'field__' . $element['#field_name'];
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#bundle'];
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#field_name'];
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#bundle'];

  return $suggestions;
}

/**
 * Implements HOOK_stream_wrappers().
 */
function system_stream_wrappers() {
  $wrappers = array(
    'public' => array(
      'name' => t('Public files'),
      'class' => 'Drupal\Core\StreamWrapper\PublicStream',
      'description' => t('Public local files served by the webserver.'),
      'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
    ),
    'temporary' => array(
      'name' => t('Temporary files'),
      'class' => 'Drupal\Core\StreamWrapper\TemporaryStream',
      'description' => t('Temporary local files for upload and previews.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
  );

  // Only register the private file stream wrapper if a file path has been set.
  if (\Drupal::config('system.file')->get('path.private')) {
    $wrappers['private'] = array(
      'name' => t('Private files'),
      'class' => 'Drupal\Core\StreamWrapper\PrivateStream',
      'description' => t('Private local files served by Drupal.'),
      'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
    );
  }

  return $wrappers;
}

/**
 * Menu item access callback - only enabled themes can be accessed.
 */
function _system_themes_access($theme) {
  return user_access('administer themes') && drupal_theme_access($theme);
}

/**
 * @defgroup authorize Authorized operations
 * @{
 * Functions to run operations with elevated privileges via authorize.php.
 *
 * Because of the Update manager functionality included in Drupal core, there
 * is a mechanism for running operations with elevated file system privileges,
 * the top-level authorize.php script. This script runs at a reduced Drupal
 * bootstrap level so that it is not reliant on the entire site being
 * functional. The operations use a FileTransfer class to manipulate code
 * installed on the system as the user that owns the files, not the user that
 * the httpd is running as.
 *
 * The first setup is to define a callback function that should be authorized
 * to run with the elevated privileges. This callback should take a
 * FileTransfer as its first argument, although you can define an array of
 * other arguments it should be invoked with. The callback should be placed in
 * a separate .inc file that will be included by authorize.php.
 *
 * To run the operation, certain data must be saved into the SESSION, and then
 * the flow of control should be redirected to the authorize.php script. There
 * are two ways to do this, either to call system_authorized_run() directly,
 * or to call system_authorized_init() and then redirect to authorize.php,
 * using the URL from system_authorized_get_url(). Redirecting yourself is
 * necessary when your authorized operation is being triggered by a form
 * submit handler, since calling redirecting in a submit handler is a bad
 * idea, and you should instead set $form_state['redirect'].
 *
 * Once the SESSION is setup for the operation and the user is redirected to
 * authorize.php, they will be prompted for their connection credentials (core
 * provides FTP and SSH by default, although other connection classes can be
 * added via contributed modules). With valid credentials, authorize.php will
 * instantiate the appropriate FileTransfer object, and then invoke the
 * desired operation passing in that object. The authorize.php script can act
 * as a Batch API processing page, if the operation requires a batch.
 *
 * @see authorize.php
 * @see \Drupal\Core\FileTransfer\FileTransfer
 * @see HOOK_filetransfer_info()
 */

/**
 * Setup a given callback to run via authorize.php with elevated privileges.
 *
 * To use authorize.php, certain variables must be stashed into $_SESSION. This
 * function sets up all the necessary $_SESSION variables. The calling function
 * should then redirect to authorize.php, using the full path returned by
 * system_authorized_get_url(). That initiates the workflow that will eventually
 * lead to the callback being invoked. The callback will be invoked at a low
 * bootstrap level, without all modules being invoked, so it needs to be careful
 * not to assume any code exists. Example (system_authorized_run()):
 * @code
 *   system_authorized_init($callback, $file, $arguments, $page_title);
 *   return new RedirectResponse(system_authorized_get_url());
 * @endcode
 * Example (update_manager_install_form_submit()):
 * @code
 *  system_authorized_init('update_authorize_run_install',
 *    drupal_get_path('module', 'update') . '/update.authorize.inc',
 *    $arguments, t('Update manager'));
 *  $form_state['redirect'] = system_authorized_get_url();
 * @endcode
 *
 * @param $callback
 *   The name of the function to invoke once the user authorizes the operation.
 * @param $file
 *   The full path to the file where the callback function is implemented.
 * @param $arguments
 *   Optional array of arguments to pass into the callback when it is invoked.
 *   Note that the first argument to the callback is always the FileTransfer
 *   object created by authorize.php when the user authorizes the operation.
 * @param $page_title
 *   Optional string to use as the page title once redirected to authorize.php.
 * @return
 *   Nothing, this function just initializes variables in the user's session.
 */
function system_authorized_init($callback, $file, $arguments = array(), $page_title = NULL) {
  // First, figure out what file transfer backends the site supports, and put
  // all of those in the SESSION so that authorize.php has access to all of
  // them via the class autoloader, even without a full bootstrap.
  $_SESSION['authorize_filetransfer_info'] = drupal_get_filetransfer_info();

  // Now, define the callback to invoke.
  $_SESSION['authorize_operation'] = array(
    'callback' => $callback,
    'file' => $file,
    'arguments' => $arguments,
  );

  if (isset($page_title)) {
    $_SESSION['authorize_page_title'] = $page_title;
  }
}

/**
 * Return the URL for the authorize.php script.
 *
 * @param array $options
 *   Optional array of options to pass to url().
 * @return
 *   The full URL to authorize.php, using HTTPS if available.
 *
 * @see system_authorized_init()
 */
function system_authorized_get_url(array $options = array()) {
  global $base_url;
  // Force HTTPS if available, regardless of what the caller specifies.
  $options['https'] = TRUE;
  // Prefix with $base_url so url() treats it as an external link.
  return url($base_url . '/core/authorize.php', $options);
}

/**
 * Returns the URL for the authorize.php script when it is processing a batch.
 *
 * @param array $options
 *   Optional array of options to pass to url().
 */
function system_authorized_batch_processing_url(array $options = array()) {
  $options['query'] = array('batch' => '1');
  return system_authorized_get_url($options);
}

/**
 * Setup and invoke an operation using authorize.php.
 *
 * @see system_authorized_init()
 */
function system_authorized_run($callback, $file, $arguments = array(), $page_title = NULL) {
  system_authorized_init($callback, $file, $arguments, $page_title);
  return new RedirectResponse(system_authorized_get_url());
}

/**
 * Use authorize.php to run batch_process().
 *
 * @see batch_process()
 */
function system_authorized_batch_process() {
  $finish_url = system_authorized_get_url();
  $process_url = system_authorized_batch_processing_url();
  return batch_process($finish_url, $process_url);
}

/**
 * @} End of "defgroup authorize".
 */

/**
 * Implements HOOK_updater_info().
 */
function system_updater_info() {
  return array(
    'module' => array(
      'class' => 'Drupal\Core\Updater\Module',
      'name' => t('Update modules'),
      'weight' => 0,
    ),
    'theme' => array(
      'class' => 'Drupal\Core\Updater\Theme',
      'name' => t('Update themes'),
      'weight' => 0,
    ),
  );
}

/**
 * Implements HOOK_filetransfer_info().
 */
function system_filetransfer_info() {
  $backends = array();

  // This is the default, will be available on most systems.
  if (function_exists('ftp_connect')) {
    $backends['ftp'] = array(
      'title' => t('FTP'),
      'class' => 'Drupal\Core\FileTransfer\FTP',
      'weight' => 0,
    );
  }

  // SSH2 lib connection is only available if the proper PHP extension is
  // installed.
  if (function_exists('ssh2_connect')) {
    $backends['ssh'] = array(
      'title' => t('SSH'),
      'class' => 'Drupal\Core\FileTransfer\SSH',
      'weight' => 20,
    );
  }
  return $backends;
}

/**
 * Implements HOOK_page_build().
 *
 * @see template_preprocess_maintenance_page()
 * @see \Drupal\system\Controller\SystemController::setLinkActiveClass()
 */
function system_page_build(&$page) {
  // Ensure the same CSS is loaded in template_preprocess_maintenance_page().
  $page['#attached']['library'][] = 'core/normalize';
  $page['#attached']['library'][] = 'system/base';
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $page['#attached']['library'][] = 'system/admin';
  }

  // Handle setting the "active" class on links by:
  // - loading the active-link library if the current user is authenticated;
  // - applying a post-render cache callback if the current user is anonymous.
  // @see l()
  // @see \Drupal\Core\Utility\LinkGenerator::generate()
  // @see template_preprocess_links()
  // @see \Drupal\system\Controller\SystemController::setLinkActiveClass
  if (\Drupal::currentUser()->isAuthenticated()) {
    $page['#attached']['library'][] = 'core/drupal.active-link';
  }
  else {
    $page['#post_render_cache']['\Drupal\system\Controller\SystemController::setLinkActiveClass'] = array(
      // Collect the current state that determines whether a link is active.
      array(
        'path' => current_path(),
        'front' => drupal_is_front_page(),
        'language' => \Drupal::languageManager()->getCurrentLanguage(\Drupal\Core\Language\Language::TYPE_URL)->id,
        'query' => \Drupal::service('request')->query->all(),
      )
    );
  }
}

/**
 * Implements HOOK_form_FORM_ID_alter().
 */
function system_form_user_form_alter(&$form, &$form_state) {
  if (\Drupal::config('system.date')->get('timezone.user.configurable')) {
    system_user_timezone($form, $form_state);
  }
}

/**
 * Implements HOOK_form_FORM_ID_alter().
 */
function system_form_user_register_form_alter(&$form, &$form_state) {
  $config = \Drupal::config('system.date');
  if ($config->get('timezone.user.configurable') && $config->get('timezone.user.default') == DRUPAL_USER_TIMEZONE_SELECT) {
    system_user_timezone($form, $form_state);
  }
}

/**
 * Implements HOOK_user_presave().
 */
function system_user_presave(UserInterface $account) {
  $config = \Drupal::config('system.date');
  if ($config->get('timezone.user.configurable') && !$account->getTimeZone() && !$config->get('timezone.user.default')) {
    $account->timezone = $config->get('timezone.default');
  }
}

/**
 * Implements HOOK_user_login().
 */
function system_user_login($account) {
  $config = \Drupal::config('system.date');
  // If the user has a NULL time zone, notify them to set a time zone.
  if (!$account->getTimezone() && $config->get('timezone.user.configurable') && $config->get('timezone.user.warn')) {
    drupal_set_message(t('Configure your <a href="@user-edit">account time zone setting</a>.', array('@user-edit' => url("user/$account->id()/edit", array('query' => drupal_get_destination(), 'fragment' => 'edit-timezone')))));
  }
}

/**
 * Add the time zone field to the user edit and register forms.
 */
function system_user_timezone(&$form, &$form_state) {
  $user = \Drupal::currentUser();

  $account = $form_state['controller']->getEntity();
  $form['timezone'] = array(
    '#type' => 'details',
    '#title' => t('Locale settings'),
    '#open' => TRUE,
    '#weight' => 6,
  );
  $form['timezone']['timezone'] = array(
    '#type' => 'select',
    '#title' => t('Time zone'),
    '#default_value' => $account->getTimezone() ? $account->getTimezone() : \Drupal::config('system.date')->get('timezone.default'),
    '#options' => system_time_zones($account->id() != $user->id()),
    '#description' => t('Select the desired local time and time zone. Dates and times throughout this site will be displayed using this time zone.'),
  );
  if (!$account->getTimezone() && $account->id() == $user->id() && empty($form_state['input']['timezone'])) {
    $form['timezone']['#description'] = t('Your time zone setting will be automatically detected if possible. Confirm the selection and click save.');
    $form['timezone']['#attached']['library'][] = 'core/drupal.timezone';
    $form['timezone']['timezone']['#attributes'] = array('class' => array('timezone-detect'));
  }
}

/**
 * Implements HOOK_preprocess_HOOK() for block templates.
 */
function system_preprocess_block(&$variables) {
  switch ($variables['base_plugin_id']) {
    case 'system_branding_block':
      $variables['site_logo'] = '';
      if ($variables['content']['site_logo']['#access'] && $variables['content']['site_logo']['#uri']) {
        $variables['site_logo'] = $variables['content']['site_logo']['#uri'];
      }
      $variables['site_name'] = '';
      if ($variables['content']['site_name']['#access'] && $variables['content']['site_name']['#markup']) {
        $variables['site_name'] = $variables['content']['site_name']['#markup'];
      }
      $variables['site_slogan'] = '';
      if ($variables['content']['site_slogan']['#access'] && $variables['content']['site_slogan']['#markup']) {
        $variables['site_slogan'] = $variables['content']['site_slogan']['#markup'];
      }
      break;

    case 'system_powered_by_block':
      $variables['attributes']['role'] = 'complementary';
      break;

    case 'system_help_block':
      $variables['attributes']['role'] = 'complementary';
      break;

    case 'system_menu_block':
      $menus = menu_list_system_menus();
      if (isset($menus[$variables['derivative_plugin_id']])) {
        $variables['attributes']['role'] = 'navigation';
        $variables['attributes']['class'][] = 'block-menu';
      }
      break;
  }
}

/**
 * Checks the existence of the directory specified in $form_element.
 *
 * This function is called from the system_settings form to check all core
 * file directories (file_public_path, file_private_path, file_temporary_path).
 *
 * @param $form_element
 *   The form element containing the name of the directory to check.
 */
function system_check_directory($form_element) {
  $directory = $form_element['#value'];
  if (strlen($directory) == 0) {
    return $form_element;
  }

  if (!is_dir($directory) && !drupal_mkdir($directory, NULL, TRUE)) {
    // If the directory does not exists and cannot be created.
    form_set_error($form_element['#parents'][0], $form_state, t('The directory %directory does not exist and could not be created.', array('%directory' => $directory)));
    watchdog('file system', 'The directory %directory does not exist and could not be created.', array('%directory' => $directory), WATCHDOG_ERROR);
  }

  if (is_dir($directory) && !is_writable($directory) && !drupal_chmod($directory)) {
    // If the directory is not writable and cannot be made so.
    form_set_error($form_element['#parents'][0], $form_state, t('The directory %directory exists but is not writable and could not be made writable.', array('%directory' => $directory)));
    watchdog('file system', 'The directory %directory exists but is not writable and could not be made writable.', array('%directory' => $directory), WATCHDOG_ERROR);
  }
  elseif (is_dir($directory)) {
    if ($form_element['#name'] == 'file_public_path') {
      // Create public .htaccess file.
      file_save_htaccess($directory, FALSE);
    }
    else {
      // Create private .htaccess file.
      file_save_htaccess($directory);
    }
  }

  return $form_element;
}

/**
 * Returns an array of information about enabled modules or themes.
 *
 * This function returns the contents of the .info.yml file for each installed
 * module or theme.
 *
 * @param $type
 *   Either 'module' or 'theme'.
 * @param $name
 *   (optional) The name of a module or theme whose information shall be
 *   returned. If omitted, all records for the provided $type will be returned.
 *   If $name does not exist in the provided $type or is not enabled, an empty
 *   array will be returned.
 *
 * @return
 *   An associative array of module or theme information keyed by name, or only
 *   information for $name, if given. If no records are available, an empty
 *   array is returned.
 *
 * @see system_rebuild_module_data()
 * @see system_rebuild_theme_data()
 */
function system_get_info($type, $name = NULL) {
  $info = array();
  if ($type == 'module') {
    $data = system_rebuild_module_data();
    foreach (\Drupal::moduleHandler()->getModuleList() as $module => $filename) {
      if (isset($data[$module])) {
        $info[$module] = $data[$module]->info;
      }
    }
  }
  else {
    $list = system_list($type);
    foreach ($list as $shortname => $item) {
      if (!empty($item->status)) {
        $info[$shortname] = $item->info;
      }
    }
  }
  if (isset($name)) {
    return isset($info[$name]) ? $info[$name] : array();
  }
  return $info;
}

/**
 * Helper function to scan and collect module .info.yml data.
 *
 * @return \Drupal\Core\Extension\Extension[]
 *   An associative array of module information.
 */
function _system_rebuild_module_data() {
  $listing = new ExtensionDiscovery();
  // Find modules
  $modules = $listing->scan('module');

  // Find installation profiles.
  $profiles = $listing->scan('profile');

  // Include the installation profile in modules that are loaded.
  if ($profile = drupal_get_profile()) {
    $modules[$profile] = $profiles[$profile];
    // Installation profile hooks are always executed last.
    $modules[$profile]->weight = 1000;
  }

  // Set defaults for module info.
  $defaults = array(
    'dependencies' => array(),
    'description' => '',
    'package' => 'Other',
    'version' => NULL,
    'php' => DRUPAL_MINIMUM_PHP,
  );

  // Read info files for each module.
  foreach ($modules as $key => $module) {
    // Look for the info file.
    $module->info = \Drupal::service('info_parser')->parse($module->getPathname());

    // Add the info file modification time, so it becomes available for
    // contributed modules to use for ordering module lists.
    $module->info['mtime'] = $module->getMTime();

    // Merge in defaults and save.
    $modules[$key]->info = $module->info + $defaults;

    // Installation profiles are hidden by default, unless explicitly specified
    // otherwise in the .info.yml file.
    if ($key == $profile && !isset($modules[$key]->info['hidden'])) {
      $modules[$key]->info['hidden'] = TRUE;
    }

    // Invoke HOOK_system_info_alter() to give installed modules a chance to
    // modify the data in the .info.yml files if necessary.
    // @todo Remove $type argument, obsolete with $module->getType().
    $type = 'module';
    \Drupal::moduleHandler()->alter('system_info', $modules[$key]->info, $modules[$key], $type);
  }

  // It is possible that a module was marked as required by
  // HOOK_system_info_alter() and modules that it depends on are not required.
  foreach ($modules as $module) {
    _system_rebuild_module_data_ensure_required($module, $modules);
  }


  if ($profile && isset($modules[$profile])) {
    // The installation profile is required, if it's a valid module.
    $modules[$profile]->info['required'] = TRUE;
    // Add a default distribution name if the profile did not provide one.
    // @see install_profile_info()
    // @see drupal_install_profile_distribution_name()
    if (!isset($modules[$profile]->info['distribution']['name'])) {
      $modules[$profile]->info['distribution']['name'] = 'Drupal';
    }
  }

  return $modules;
}

/**
 * Ensures that dependencies of required modules are also required.
 *
 * @param \Drupal\Core\Extension\Extension $module
 *   The module info.
 * @param \Drupal\Core\Extension\Extension[] $modules
 *   The array of all module info.
 */
function _system_rebuild_module_data_ensure_required($module, &$modules) {
  if (!empty($module->info['required'])) {
    foreach ($module->info['dependencies'] as $dependant) {
      if (!isset($modules[$dependant]->info['required'])) {
        $modules[$dependant]->info['required'] = TRUE;
        $modules[$dependant]->info['explanation'] = t('Dependency of required module @module', array('@module' => $module->info['name']));
        // Ensure any dependencies it has are required.
        _system_rebuild_module_data_ensure_required($modules[$dependant], $modules);
      }
    }
  }
}

/**
 * Rebuild, save, and return data about all currently available modules.
 *
 * @return \Drupal\Core\Extension\Extension[]
 *   Array of all available modules and their data.
 */
function system_rebuild_module_data() {
  $modules_cache = &drupal_static(__FUNCTION__);
  // Only rebuild once per request. $modules and $modules_cache cannot be
  // combined into one variable, because the $modules_cache variable is reset by
  // reference from system_list_reset() during the rebuild.
  if (!isset($modules_cache)) {
    $modules = _system_rebuild_module_data();
    $files = array();
    ksort($modules);
    // Add status, weight, and schema version.
    $installed_modules = \Drupal::config('core.extension')->get('module') ?: array();
    foreach ($modules as $name => $module) {
      $module->weight = isset($installed_modules[$name]) ? $installed_modules[$name] : 0;
      $module->status = (int) isset($installed_modules[$name]);
      $module->schema_version = SCHEMA_UNINSTALLED;
      $files[$name] = $module->getPathname();
    }
    $modules = \Drupal::moduleHandler()->buildModuleDependencies($modules);
    $modules_cache = $modules;

    // Store filenames to allow system_list() and drupal_get_filename() to
    // retrieve them without having to rebuild or scan the filesystem.
    \Drupal::state()->set('system.module.files', $files);
  }
  return $modules_cache;
}

/**
 * Helper function to scan and collect theme .info.yml data and their engines.
 *
 * @return \Drupal\Core\Extension\Extension[]
 *   An associative array of themes information.
 *
 * @see \Drupal\Core\Extension\ThemeHandlerInterface::rebuildThemeData()
 *
 * @deprecated in Drupal 8.x-dev, will be removed before Drupal 8.0.
 *   Use \Drupal::service('theme_handler')->rebuildThemeData().
 */
function _system_rebuild_theme_data() {
  return \Drupal::service('theme_handler')->rebuildThemeData();
}

/**
 * Rebuild, save, and return data about all currently available themes.
 *
 * @return \Drupal\Core\Extension\Extension[]
 *   Array of all available themes and their data.
 */
function system_rebuild_theme_data() {
  $themes = _system_rebuild_theme_data();
  ksort($themes);
  // @todo This function has no business in determining/setting the status of
  //   a theme, but various other functions expect it to return themes with a
  //   $status property. system_list() stores the return value of this function
  //   in state, and ensures to set/override the $status property for each theme
  //   based on the current config. Remove this code when themes have a proper
  //   installation status.
  // @see http://drupal.org/node/1067408
  $enabled_themes = \Drupal::config('core.extension')->get('theme') ?: array();
  $files = array();
  foreach ($themes as $name => $theme) {
    $theme->status = (int) isset($enabled_themes[$name]);
    $files[$name] = $theme->getPathname();
  }
  // Replace last known theme data state.
  // @todo Obsolete with proper installation status for themes.
  \Drupal::state()->set('system.theme.data', $themes);

  // Store filenames to allow system_list() and drupal_get_filename() to
  // retrieve them without having to rebuild or scan the filesystem.
  \Drupal::state()->set('system.theme.files', $files);

  return $themes;
}

/**
 * Returns an array of default theme features.
 */
function _system_default_theme_features() {
  return array(
    'logo',
    'favicon',
    'name',
    'slogan',
    'node_user_picture',
    'comment_user_picture',
    'comment_user_verification',
    'main_menu',
    'secondary_menu',
  );
}

/**
 * Get a list of available regions from a specified theme.
 *
 * @param $theme_key
 *   The name of a theme.
 * @param $show
 *   Possible values: REGIONS_ALL or REGIONS_VISIBLE. Visible excludes hidden
 *   regions.
 * @return
 *   An array of regions in the form $region['name'] = 'description'.
 */
function system_region_list($theme_key, $show = REGIONS_ALL) {
  $themes = list_themes();
  if (!isset($themes[$theme_key])) {
    return array();
  }

  $list = array();
  $info = $themes[$theme_key]->info;
  // If requested, suppress hidden regions. See block_admin_display_form().
  foreach ($info['regions'] as $name => $label) {
    if ($show == REGIONS_ALL || !isset($info['regions_hidden']) || !in_array($name, $info['regions_hidden'])) {
      $list[$name] = t($label);
    }
  }

  return $list;
}

/**
 * Array sorting callback; sorts modules by their name.
 */
function system_sort_modules_by_info_name($a, $b) {
  return strcasecmp($a->info['name'], $b->info['name']);
}

/**
 * Array sorting callback; sorts modules or themes by their name.
 */
function system_sort_themes($a, $b) {
  if ($a->is_default) {
    return -1;
  }
  if ($b->is_default) {
    return 1;
  }
  return strcasecmp($a->info['name'], $b->info['name']);
}

/**
 * Implements HOOK_system_info_alter().
 */
function system_system_info_alter(&$info, Extension $file, $type) {
  // Remove page-top and page-bottom from the blocks UI since they are reserved for
  // modules to populate from outside the blocks system.
  if ($type == 'theme') {
    $info['regions_hidden'][] = 'page_top';
    $info['regions_hidden'][] = 'page_bottom';
  }
}

/**
 * Gets the name of the default region for a given theme.
 *
 * @param $theme
 *   The name of a theme.
 * @return
 *   A string that is the region name.
 */
function system_default_region($theme) {
  $regions = array_keys(system_region_list($theme, REGIONS_VISIBLE));
  return isset($regions[0]) ? $regions[0] : '';
}

/**
 * Determines whether the current user is in compact mode.
 *
 * Compact mode shows certain administration pages with less description text,
 * such as the configuration page and the permissions page.
 *
 * Whether the user is in compact mode is determined by a cookie, which is set
 * for the user by \Drupal\system\Controller\SystemController::compactPage().
 *
 * If the user does not have the cookie, the default value is given by the
 * system variable 'admin_compact_mode', which itself defaults to FALSE. This
 * does not have a user interface to set it: it is a hidden variable which can
 * be set in the settings.php file.
 *
 * @return bool
 *   TRUE when in compact mode, FALSE when in expanded mode.
 */
function system_admin_compact_mode() {
  // PHP converts dots into underscores in cookie names to avoid problems with
  // its parser, so we use a converted cookie name.
  return \Drupal::request()->cookies->get('Drupal_visitor_admin_compact_mode', \Drupal::config('system.site')->get('admin_compact_mode'));
}

/**
 * Generate a list of tasks offered by a specified module.
 *
 * @param string $module
 *   Module name.
 * @param array $info
 *   The module's information, as provided by system_get_info().
 *
 * @return array
 *   An array of task links.
 */
function system_get_module_admin_tasks($module, array $info) {
  $links = &drupal_static(__FUNCTION__);

  if (!isset($links)) {
    $links = array();
    $menu_links = entity_get_controller('menu_link')->loadModuleAdminTasks();
    foreach ($menu_links as $link) {
      _menu_link_translate($link);
      if ($link['access']) {
        $links[$link['machine_name']] = $link;
      }
    }
  }

  $admin_tasks = array();
  $titles = array();
  foreach ($links as $item) {
    if ($item['module'] != $module) {
      continue;
    }
    $machine_name = $item['machine_name'];
    if (isset($links[$machine_name])) {
      $task = $links[$machine_name];
      // The link description, either derived from 'description' in the default
      // menu link or customized via menu module is used as title attribute.
      if (!empty($task['localized_options']['attributes']['title'])) {
        $task['description'] = $task['localized_options']['attributes']['title'];
        unset($task['localized_options']['attributes']['title']);
      }

      // Check the admin tasks for duplicate names. If one is found,
      // append the parent menu item's title to differentiate.
      $duplicate_path = array_search($task['title'], $titles);
      if ($duplicate_path !== FALSE) {
        if ($parent = menu_link_load($task['plid'])) {
          // Append the parent item's title to this task's title.
          $task['title'] = t('@original_title (@parent_title)', array('@original_title' => $task['title'], '@parent_title' => $parent['title']));
        }
        if ($parent = menu_link_load($admin_tasks[$duplicate_path]['plid'])) {
          // Append the parent item's title to the duplicated task's title.
          // We use $links[$duplicate_path] in case there are triplicates.
          $admin_tasks[$duplicate_path]['title'] = t('@original_title (@parent_title)', array('@original_title' => $links[$duplicate_path]['title'], '@parent_title' => $parent['title']));
        }
      }
      else {
        $titles[$machine_name] = $task['title'];
      }

      $admin_tasks[$machine_name] = $task;
    }
  }

  // Append link for permissions.
  if (\Drupal::moduleHandler()->implementsHook($module, 'permission')) {
    /** @var \Drupal\Core\Access\AccessManager $access_manager */
    $access_manager = \Drupal::service('access_manager');
    /** @var \Drupal\menu_link\MenuLinkStorageInterface $menu_link_storage */
    $menu_link_storage = \Drupal::entityManager()
      ->getStorage('menu_link');
    if ($access_manager->checkNamedRoute('user.admin_permissions', array(), \Drupal::currentUser())) {
      $path = \Drupal::urlGenerator()
        ->getPathFromRoute('user.admin_permissions');
      $options = array();
      $options['fragment'] = 'module-' . $module;
      $menu_link = $menu_link_storage->create(array(
        'route_name' => 'user.admin_permissions',
        'link_path' => $path,
        'title' => t('Configure @module permissions', array('@module' => $info['name'])),
        'localized_options' => $options
      ));
      $admin_tasks["user.admin.people.permissions.$module"] = $menu_link;
    }
  }

  return $admin_tasks;
}

/**
 * Implements HOOK_cron().
 *
 * Remove older rows from flood and batch table. Remove old temporary files.
 */
function system_cron() {
  // Cleanup the flood.
  \Drupal::flood()->garbageCollection();

  foreach (Cache::getBins() as $cache_backend) {
    $cache_backend->garbageCollection();
  }

  // Cleanup the queue for failed batches.
  db_delete('queue')
    ->condition('created', REQUEST_TIME - 864000, '<')
    ->condition('name', 'drupal_batch:%', 'LIKE')
    ->execute();

  // Reset expired items in the default queue implementation table. If that's
  // not used, this will simply be a no-op.
  db_update('queue')
    ->fields(array(
      'expire' => 0,
    ))
    ->condition('expire', 0, '<>')
    ->condition('expire', REQUEST_TIME, '<')
    ->execute();
}

/**
 * Implements HOOK_mail().
 */
function system_mail($key, &$message, $params) {
  $token_service = \Drupal::token();

  $context = $params['context'];

  $subject = $token_service->replace($context['subject'], $context);
  $body = $token_service->replace($context['message'], $context);

  $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);
  $message['body'][] = $body;
}

/**
 * Generate an array of time zones and their local time&date.
 *
 * @param $blank
 *   If evaluates true, prepend an empty time zone option to the array.
 */
function system_time_zones($blank = NULL) {
  $zonelist = timezone_identifiers_list();
  $zones = $blank ? array('' => t('- None selected -')) : array();
  foreach ($zonelist as $zone) {
    // Because many time zones exist in PHP only for backward compatibility
    // reasons and should not be used, the list is filtered by a regular
    // expression.
    if (preg_match('!^((Africa|America|Antarctica|Arctic|Asia|Atlantic|Australia|Europe|Indian|Pacific)/|UTC$)!', $zone)) {
      $zones[$zone] = t('@zone', array('@zone' => t(str_replace('_', ' ', $zone))));
    }
  }
  // Sort the translated time zones alphabetically.
  asort($zones);
  return $zones;
}

/**
 * Returns HTML for a link to show or hide inline help descriptions.
 *
 * @ingroup themeable
 */
function theme_system_compact_link() {
  $output = '<div class="compact-link">';
  if (system_admin_compact_mode()) {
    $output .= l(t('Show descriptions'), 'admin/compact/off', array('attributes' => array('title' => t('Expand layout to include descriptions.')), 'query' => drupal_get_destination()));
  }
  else {
    $output .= l(t('Hide descriptions'), 'admin/compact/on', array('attributes' => array('title' => t('Compress layout by hiding descriptions.')), 'query' => drupal_get_destination()));
  }
  $output .= '</div>';

  return $output;
}

/**
 * Attempts to get a file using Guzzle HTTP client and to store it locally.
 *
 * @param string $url
 *   The URL of the file to grab.
 * @param string $destination
 *   Stream wrapper URI specifying where the file should be placed. If a
 *   directory path is provided, the file is saved into that directory under
 *   its original name. If the path contains a filename as well, that one will
 *   be used instead.
 *   If this value is omitted, the site's default files scheme will be used,
 *   usually "public://".
 * @param bool $managed
 *   If this is set to TRUE, the file API hooks will be invoked and the file is
 *   registered in the database.
 * @param int $replace
 *   Replace behavior when the destination file already exists:
 *   - FILE_EXISTS_REPLACE: Replace the existing file.
 *   - FILE_EXISTS_RENAME: Append _{incrementing number} until the filename is
 *     unique.
 *   - FILE_EXISTS_ERROR: Do nothing and return FALSE.
 *
 * @return mixed
 *   One of these possibilities:
 *   - If it succeeds and $managed is FALSE, the location where the file was
 *     saved.
 *   - If it succeeds and $managed is TRUE, a \Drupal\file\FileInterface
 *     object which describes the file.
 *   - If it fails, FALSE.
 */
function system_retrieve_file($url, $destination = NULL, $managed = FALSE, $replace = FILE_EXISTS_RENAME) {
  $parsed_url = parse_url($url);
  if (!isset($destination)) {
    $path = file_build_uri(drupal_basename($parsed_url['path']));
  }
  else {
    if (is_dir(drupal_realpath($destination))) {
      // Prevent URIs with triple slashes when glueing parts together.
      $path = str_replace('///', '//', "$destination/") . drupal_basename($parsed_url['path']);
    }
    else {
      $path = $destination;
    }
  }
  try {
    $data = \Drupal::httpClient()
      ->get($url)
      ->getBody(TRUE);
    $local = $managed ? file_save_data($data, $path, $replace) : file_unmanaged_save_data($data, $path, $replace);
  }
  catch (RequestException $exception) {
    drupal_set_message(t('Failed to fetch file due to error "%error"', array('%error' => $exception->getMessage())), 'error');
    return FALSE;
  }
  if (!$local) {
    drupal_set_message(t('@remote could not be saved to @path.', array('@remote' => $url, '@path' => $path)), 'error');
  }

  return $local;
}

/**
 * Implements HOOK_page_alter().
 */
function system_page_alter(&$page) {
  // Find all non-empty page regions, and add a theme wrapper function that
  // allows them to be consistently themed.
  $regions = system_region_list($GLOBALS['theme']);
  foreach (array_keys($regions) as $region) {
    if (!empty($page[$region])) {
      $page[$region]['#theme_wrappers'][] = 'region';
      $page[$region]['#region'] = $region;
    }
  }
}

/**
 * Implements HOOK_block_view_BASE_BLOCK_ID_alter().
 */
function system_block_view_system_main_block_alter(array &$build, BlockPluginInterface $block) {
  // Contextual links on the system_main block would basically duplicate the
  // tabs/local tasks, so reduce the clutter.
  unset($build['#contextual_links']);
}

/**
 * Implements HOOK_block_view_BASE_BLOCK_ID_alter().
 */
function system_block_view_system_help_block_alter(array &$build, BlockPluginInterface $block) {
  // Assume that most users do not need or want to perform contextual actions on
  // the help block, so don't needlessly draw attention to it.
  unset($build['#contextual_links']);
}

/**
 * Returns HTML for a system settings form.
 *
 * By default this does not alter the appearance of a form at all,
 * but is provided as a convenience for themers.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_system_config_form($variables) {
  return drupal_render_children($variables['form']);
}

/**
 * Implements HOOK_path_update().
 */
function system_path_update() {
  \Drupal::service('path.alias_manager.cached')->cacheClear();
}

/**
 * Implements HOOK_path_insert().
 */
function system_path_insert() {
  \Drupal::service('path.alias_manager.cached')->cacheClear();
}

/**
 * Implements HOOK_path_delete().
 */
function system_path_delete($path) {
  \Drupal::service('path.alias_manager.cached')->cacheClear();
}
