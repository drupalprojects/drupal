<?php

/**
 * Implements HOOK_theme().
 */
function theme_test_theme($existing, $type, $theme, $path) {
  $items['theme_test'] = array(
    'file' => 'theme_test.inc',
    'variables' => array('foo' => ''),
  );
  $items['theme_test_template_test'] = array(
    'template' => 'theme_test.template_test',
  );
  $items['theme_test_template_test_2'] = array(
    'template' => 'theme_test.template_test',
  );
  $items['theme_test_suggestion_provided'] = array(
    'template' => 'theme-test-suggestion-provided',
    'variables' => array(),
  );
  $items['theme_test_specific_suggestions'] = array(
    'template' => 'theme-test-specific-suggestions',
    'variables' => array(),
  );
  $items['theme_test_suggestions'] = array(
    'template' => 'theme-test-suggestions',
    'variables' => array(),
  );
  $items['theme_test_general_suggestions'] = array(
    'template' => 'theme-test-general-suggestions',
    'variables' => array(),
  );
  $items['theme_test_function_suggestions'] = array(
    'variables' => array(),
  );
  $items['theme_test_suggestions_include'] = array(
    'variables' => array(),
  );
  $items['theme_test_foo'] = array(
    'variables' => array('foo' => NULL),
  );
  $items['theme_test_render_element'] = array(
    'render element' => 'elements',
    'template' => 'theme-test-render-element',
  );
  $items['theme_test_render_element_children'] = array(
    'render element' => 'element',
  );
  $items['theme_test_function_template_override'] = array(
    'variables' => array(),
  );
  $info['test_theme_not_existing_function'] = array(
    'function' => 'test_theme_not_existing_function',
  );
  return $items;
}

/**
 * Implements HOOK_preprocess_HOOK() for HTML document templates.
 */
function theme_test_preprocess_html(&$variables) {
  $variables['html_attributes']['theme_test_html_attribute'] = 'theme test html attribute value';
  $variables['attributes']['theme_test_body_attribute'] = 'theme test body attribute value';

  $variables['attributes']['theme_test_page_variable'] = 'Page variable is an array.';
}

/**
 * Implements HOOK_page_alter().
 */
function theme_test_page_alter(&$page) {
  $page['page_bottom']['theme_test_page_bottom'] = array('#markup' => 'theme test page bottom markup');
}

/**
 * Theme function for testing _theme('theme_test_foo').
 */
function theme_theme_test_foo($variables) {
  return $variables['foo'];
}

/**
 * Theme function for testing _theme('theme_test_function_template_override').
 */
function theme_theme_test_function_template_override($variables) {
  return 'theme_test_function_template_override test failed.';
}

/**
 * Prepares variables for test render element templates.
 *
 * Default template: theme-test-render-element.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the properties of the element.
 */
function template_preprocess_theme_test_render_element(&$variables) {
  $variables['attributes']['data-variables-are-preprocessed'] = TRUE;
}

/**
 * Theme function for testing rendering of child elements via drupal_render().
 *
 * Theme hooks defining a 'render element' add an internal '#render_children'
 * property. When this property is found, drupal_render() avoids calling
 * _theme() on the top-level element to prevent infinite recursion.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 */
function theme_theme_test_render_element_children($variables) {
  return drupal_render($variables['element']);
}

/**
 * Returns HTML for a theme function suggestion test.
 */
function theme_theme_test_function_suggestions($variables) {
  return 'Original theme function.';
}

/**
 * Implements HOOK_theme_suggestions_HOOK().
 */
function theme_test_theme_suggestions_theme_test_suggestion_provided(array $variables) {
  return array('theme_test_suggestion_provided__' . 'foo');
}

/**
 * Implements HOOK_theme_suggestions_alter().
 */
function theme_test_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  drupal_set_message(__FUNCTION__ . '() executed.');
}

/**
 * Implements HOOK_theme_suggestions_hook_alter().
 */
function theme_test_theme_suggestions_theme_test_suggestions_alter(array &$suggestions, array $variables) {
  drupal_set_message(__FUNCTION__ . '() executed.');
}

/**
 * Returns HTML for a theme function include test.
 */
function theme_theme_test_suggestions_include($variables) {
  return 'Original function before altering theme suggestions.';
}
