<?php

/**
 * @file
 * Defines selection, check box and radio button widgets for text and numeric fields.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\field\FieldConfigUpdateForbiddenException;

/**
 * Implements HOOK_help().
 */
function options_help($path, $arg) {
  switch ($path) {
    case 'admin/help#options':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Options module allows you to create fields where data values are selected from a fixed list of options. Usually these items are entered through a select list, checkboxes, or radio buttons. See the <a href="!field">Field module help</a> and the <a href="!field_ui">Field UI help</a> pages for general information on fields and how to create and manage them. For more information, see the <a href="!options_do">online documentation for the Options module</a>.', array('!field' => \Drupal::url('help.page', array('name' => 'field')), '!field_ui' => \Drupal::url('help.page', array('name' => 'field_ui')), '!options_do' => 'https://drupal.org/documentation/modules/options')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Managing and displaying list fields') . '</dt>';
      $output .= '<dd>' . t('The <em>settings</em> and the <em>display</em> of the list fields can be configured separately. See the <a href="!field_ui">Field UI help</a> for more information on how to manage fields and their display.', array('!field_ui' => \Drupal::url('help.page', array('name' => 'field_ui')))) . '</dd>';
      $output .= '<dt>' . t('Defining option keys and labels') . '</dt>';
      $output .= '<dd>' . t('When you define the list options you can define a key and a label for each option in the list. The label will be shown to the users while the key gets stored in the database.') . '</dd>';
      $output .= '<dt>' . t('Choosing list field type') . '</dt>';
      $output .= '<dd>' . t('There are three types of list fields, which store different types of data: <em>float</em>, <em>integer</em> or, <em>text</em>. The <em>float</em> type allows storing approximate decimal values. The <em>integer</em> type allows storing whole numbers, such as years (for example, 2012) or values (for example, 1, 2, 5, 305). The <em>text</em> list field type allows storing text values. No matter which type of list field you choose, you can define whatever labels you wish for data entry.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements HOOK_ENTITY_TYPE_update() for 'field_config'.
 */
function options_field_config_update(FieldConfigInterface $field) {
  drupal_static_reset('options_allowed_values');
}

/**
 * Implements HOOK_ENTITY_TYPE_delete() for 'field_config'.
 */
function options_field_config_delete(FieldConfigInterface $field) {
  drupal_static_reset('options_allowed_values');
}

/**
 * Returns the array of allowed values for a list field.
 *
 * The strings are not safe for output. Keys and values of the array should be
 * sanitized through field_filter_xss() before being displayed.
 *
 * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
 *   The field definition.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 *
 * @return
 *   The array of allowed values. Keys of the array are the raw stored values
 *   (number or text), values of the array are the display labels.
 */
function options_allowed_values(FieldDefinitionInterface $field_definition, EntityInterface $entity) {
  $allowed_values = &drupal_static(__FUNCTION__, array());

  $cache_id = implode(':', array($entity->getEntityTypeId(), $entity->bundle(), $field_definition->getName()));
  if (!isset($allowed_values[$cache_id])) {
    $function = $field_definition->getSetting('allowed_values_function');
    // If $cacheable is FALSE, then the allowed values are not statically
    // cached. See options_test_dynamic_values_callback() for an example of
    // generating dynamic and uncached values.
    $cacheable = TRUE;
    if (!empty($function)) {
      $values = $function($field_definition, $entity, $cacheable);
    }
    else {
      $values = $field_definition->getSetting('allowed_values');
    }

    if ($cacheable) {
      $allowed_values[$cache_id] = $values;
    }
    else {
      return $values;
    }
  }

  return $allowed_values[$cache_id];
}

/**
 * Implements HOOK_field_config_update_forbid().
 */
function options_field_config_update_forbid(FieldConfigInterface $field, FieldConfigInterface $prior_field) {
  if ($field->module == 'options' && $field->hasData()) {
    // Forbid any update that removes allowed values with actual data.
    $allowed_values = $field->getSetting('allowed_values');
    $prior_allowed_values = $prior_field->getSetting('allowed_values');
    $lost_keys = array_diff(array_keys($prior_allowed_values), array_keys($allowed_values));
    if (_options_values_in_use($field->entity_type, $field->getName(), $lost_keys)) {
      throw new FieldConfigUpdateForbiddenException(t('A list field (@field_name) with existing data cannot have its keys changed.', array('@field_name' => $field->getName())));
    }
  }
}

/**
 * Checks if a list of values are being used in actual field values.
 */
function _options_values_in_use($entity_type, $field_name, $values) {
  if ($values) {
    $factory = \Drupal::service('entity.query');
    $result = $factory->get($entity_type)
      ->condition($field_name . '.value', $values)
      ->count()
      ->accessCheck(FALSE)
      ->range(0, 1)
      ->execute();
    if ($result) {
      return TRUE;
    }
  }

  return FALSE;
}
