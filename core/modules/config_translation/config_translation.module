<?php

/**
 * @file
 * Configuration Translation module.
 */

use Drupal\config_translation\Plugin\Derivative\ConfigTranslationLocalTasks;
use Drupal\Core\Entity\EntityInterface;
use Symfony\Component\Routing\Exception\RouteNotFoundException;

/**
 * Implements HOOK_help().
 */
function config_translation_help($path) {
  switch ($path) {
    case 'admin/help#config_translation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Configuration Translation module allows configurations to be translated into different languages. Views, your site name, contact module categories, vocabularies, menus, blocks, and so on are all stored within the unified configuration system and can be translated with this module. Content, such as nodes, taxonomy terms, custom blocks, and so on are translatable with the Content Translation module in Drupal core, while the built-in user interface (such as registration forms, content submission and administration interfaces) are translated with the Interface Translation module. Use these three modules effectively together to translate your whole site to different languages.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Translating') . '</dt>';
      $output .= '<dd>' . t('To translate configuration items, select the translate tab when viewing the configuration, select the language for which you wish to provide translations and then enter the content.') . '</dd>';
      $output .= '</dl>';
      return $output;

    case 'admin/config/regional/config-translation':
      $output = '<p>' . t('This page lists all configuration items on your site which have translatable text, like your site name, role names, etc.') . '</p>';
      return $output;
  }
}

/**
 * Implements HOOK_permission().
 */
function config_translation_permission() {
  return array(
    'translate configuration' => array(
      'title' => t('Translate user edited configuration'),
      'description' => t('Translate any configuration not shipped with modules and themes.'),
    ),
  );
}

/**
 * Implements HOOK_theme().
 */
function config_translation_theme() {
  return array(
    'config_translation_manage_form_element' => array(
      'render element' => 'element',
      'template' => 'config_translation_manage_form_element',
    ),
  );
}

/**
 * Implements HOOK_entity_type_alter().
 */
function config_translation_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  foreach ($entity_types as $entity_type_id => $entity_type) {
    if ($entity_type->isSubclassOf('Drupal\Core\Config\Entity\ConfigEntityInterface')) {
      if ($entity_type_id == 'block') {
        $class = 'Drupal\config_translation\Controller\ConfigTranslationBlockListBuilder';
      }
      elseif ($entity_type_id == 'field_instance_config') {
        $class = 'Drupal\config_translation\Controller\ConfigTranslationFieldInstanceListBuilder';
        // Will be filled in dynamically, see \Drupal\field\Entity\FieldInstanceConfig::linkTemplates().
        $entity_type->setLinkTemplate('drupal:config-translation-overview', 'config_translation.item.overview.');
      }
      else {
        $class = 'Drupal\config_translation\Controller\ConfigTranslationEntityListBuilder';
      }
      $entity_type->setControllerClass('config_translation_list', $class);

      if ($entity_type->hasLinkTemplate('edit-form')) {
        $entity_type->setLinkTemplate('drupal:config-translation-overview', 'config_translation.item.overview.' . $entity_type->getLinkTemplate('edit-form'));
      }
    }
  }
}

/**
 * Implements HOOK_config_translation_info().
 */
function config_translation_config_translation_info(&$info) {
  $entity_manager = \Drupal::entityManager();
  $route_provider = \Drupal::service('router.route_provider');

  // If field UI is not enabled, the base routes of the type
  // "field_ui.instance_edit_$entity_type" are not defined.
  if (\Drupal::moduleHandler()->moduleExists('field_ui')) {
    // Add fields entity mappers to all fieldable entity types defined.
    foreach ($entity_manager->getDefinitions() as $entity_type_id => $entity_type) {
      $base_route = NULL;
      try {
        $base_route = $route_provider->getRouteByName('field_ui.instance_edit_' . $entity_type_id);
      }
      catch (RouteNotFoundException $e) {
        // Ignore non-existent routes.
      }

      // Make sure entity type is fieldable and has a base route.
      if ($entity_type->isFieldable() && !empty($base_route)) {
        $info[$entity_type_id . '_fields'] = array(
          'base_route_name' => 'field_ui.instance_edit_' . $entity_type_id,
          'entity_type' => 'field_instance_config',
          'title' => '!label field',
          'class' => '\Drupal\config_translation\ConfigFieldInstanceMapper',
          'base_entity_type' => $entity_type_id,
          'weight' => 10,
        );
      }
    }
  }

  // Discover configuration entities automatically.
  foreach ($entity_manager->getDefinitions() as $entity_type_id => $entity_type) {
    // Determine base path for entities automatically if provided via the
    // configuration entity.
    if (
      !$entity_type->isSubclassOf('Drupal\Core\Config\Entity\ConfigEntityInterface') ||
      !$entity_type->hasLinkTemplate('edit-form')
    ) {
      // Do not record this entity mapper if the entity type does not
      // provide a base route. We'll surely not be able to do anything with
      // it anyway. Configuration entities with a dynamic base path, such as
      // field instances, need special treatment. See above.
      continue;
    }

    // Use the entity type as the plugin ID.
    $info[$entity_type_id] = array(
      'class' => '\Drupal\config_translation\ConfigEntityMapper',
      'base_route_name' => $entity_type->getLinkTemplate('edit-form'),
      'title' => '!label !entity_type',
      'names' => array(),
      'entity_type' => $entity_type_id,
      'weight' => 10,
    );
  }
}

/**
 * Implements HOOK_entity_operation().
 */
function config_translation_entity_operation(EntityInterface $entity) {
  $operations = array();
  if (\Drupal::currentUser()->hasPermission('translate configuration')) {
    $operations['translate'] = array(
      'title' => t('Translate'),
      'weight' => 50,
    ) + $entity->urlInfo('drupal:config-translation-overview')->toArray();
  }

  return $operations;
}

/**
 * Implements HOOK_config_translation_type_info_alter().
 */
function config_translation_config_translation_type_info_alter(&$definitions) {
  // Enhance the text and date type definitions with classes to generate proper
  // form elements in ConfigTranslationFormBase. Other translatable types will
  // appear as a one line textfield.
  $definitions['text']['form_element_class'] = '\Drupal\config_translation\FormElement\Textarea';
  $definitions['date_format']['form_element_class'] = '\Drupal\config_translation\FormElement\DateFormat';
}

